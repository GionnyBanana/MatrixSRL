
ProgettoDeFilippis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003570  08003570  00013570  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001d4  200001d4  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c74c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003950  00000000  00000000  0003c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007918  00000000  00000000  0004013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00047a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  00048618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000079ee  00000000  00000000  00049360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004773  00000000  00000000  00050d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000554c1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002570  00000000  00000000  00055540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003558 	.word	0x08003558

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003558 	.word	0x08003558

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b97a 	b.w	8000de0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	468c      	mov	ip, r1
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	9e08      	ldr	r6, [sp, #32]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d151      	bne.n	8000bb8 <__udivmoddi4+0xb4>
 8000b14:	428a      	cmp	r2, r1
 8000b16:	4617      	mov	r7, r2
 8000b18:	d96d      	bls.n	8000bf6 <__udivmoddi4+0xf2>
 8000b1a:	fab2 fe82 	clz	lr, r2
 8000b1e:	f1be 0f00 	cmp.w	lr, #0
 8000b22:	d00b      	beq.n	8000b3c <__udivmoddi4+0x38>
 8000b24:	f1ce 0c20 	rsb	ip, lr, #32
 8000b28:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b30:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b34:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b38:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b3c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b40:	0c25      	lsrs	r5, r4, #16
 8000b42:	fbbc f8fa 	udiv	r8, ip, sl
 8000b46:	fa1f f987 	uxth.w	r9, r7
 8000b4a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b4e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b52:	fb08 f309 	mul.w	r3, r8, r9
 8000b56:	42ab      	cmp	r3, r5
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x6c>
 8000b5a:	19ed      	adds	r5, r5, r7
 8000b5c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b60:	f080 8123 	bcs.w	8000daa <__udivmoddi4+0x2a6>
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	f240 8120 	bls.w	8000daa <__udivmoddi4+0x2a6>
 8000b6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b6e:	443d      	add	r5, r7
 8000b70:	1aed      	subs	r5, r5, r3
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b78:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b80:	fb00 f909 	mul.w	r9, r0, r9
 8000b84:	45a1      	cmp	r9, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x98>
 8000b88:	19e4      	adds	r4, r4, r7
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 810a 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000b92:	45a1      	cmp	r9, r4
 8000b94:	f240 8107 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	eba4 0409 	sub.w	r4, r4, r9
 8000ba0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d061      	beq.n	8000c6e <__udivmoddi4+0x16a>
 8000baa:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bae:	2300      	movs	r3, #0
 8000bb0:	6034      	str	r4, [r6, #0]
 8000bb2:	6073      	str	r3, [r6, #4]
 8000bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	d907      	bls.n	8000bcc <__udivmoddi4+0xc8>
 8000bbc:	2e00      	cmp	r6, #0
 8000bbe:	d054      	beq.n	8000c6a <__udivmoddi4+0x166>
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bcc:	fab3 f183 	clz	r1, r3
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	f040 808e 	bne.w	8000cf2 <__udivmoddi4+0x1ee>
 8000bd6:	42ab      	cmp	r3, r5
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xdc>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80fa 	bhi.w	8000dd4 <__udivmoddi4+0x2d0>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb65 0503 	sbc.w	r5, r5, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	46ac      	mov	ip, r5
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d03f      	beq.n	8000c6e <__udivmoddi4+0x16a>
 8000bee:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	b912      	cbnz	r2, 8000bfe <__udivmoddi4+0xfa>
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bfe:	fab7 fe87 	clz	lr, r7
 8000c02:	f1be 0f00 	cmp.w	lr, #0
 8000c06:	d134      	bne.n	8000c72 <__udivmoddi4+0x16e>
 8000c08:	1beb      	subs	r3, r5, r7
 8000c0a:	0c3a      	lsrs	r2, r7, #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c16:	0c25      	lsrs	r5, r4, #16
 8000c18:	fb02 3318 	mls	r3, r2, r8, r3
 8000c1c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c20:	fb0c f308 	mul.w	r3, ip, r8
 8000c24:	42ab      	cmp	r3, r5
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x134>
 8000c28:	19ed      	adds	r5, r5, r7
 8000c2a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x132>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f200 80d1 	bhi.w	8000dd8 <__udivmoddi4+0x2d4>
 8000c36:	4680      	mov	r8, r0
 8000c38:	1aed      	subs	r5, r5, r3
 8000c3a:	b2a3      	uxth	r3, r4
 8000c3c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c40:	fb02 5510 	mls	r5, r2, r0, r5
 8000c44:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c48:	fb0c fc00 	mul.w	ip, ip, r0
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x15c>
 8000c50:	19e4      	adds	r4, r4, r7
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x15a>
 8000c58:	45a4      	cmp	ip, r4
 8000c5a:	f200 80b8 	bhi.w	8000dce <__udivmoddi4+0x2ca>
 8000c5e:	4618      	mov	r0, r3
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c68:	e79d      	b.n	8000ba6 <__udivmoddi4+0xa2>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	f1ce 0420 	rsb	r4, lr, #32
 8000c76:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c7a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c7e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c82:	0c3a      	lsrs	r2, r7, #16
 8000c84:	fa25 f404 	lsr.w	r4, r5, r4
 8000c88:	ea48 0803 	orr.w	r8, r8, r3
 8000c8c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c90:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c94:	fb02 4411 	mls	r4, r2, r1, r4
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ca0:	fb01 f30c 	mul.w	r3, r1, ip
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000caa:	d909      	bls.n	8000cc0 <__udivmoddi4+0x1bc>
 8000cac:	19ed      	adds	r5, r5, r7
 8000cae:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cb2:	f080 808a 	bcs.w	8000dca <__udivmoddi4+0x2c6>
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	f240 8087 	bls.w	8000dca <__udivmoddi4+0x2c6>
 8000cbc:	3902      	subs	r1, #2
 8000cbe:	443d      	add	r5, r7
 8000cc0:	1aeb      	subs	r3, r5, r3
 8000cc2:	fa1f f588 	uxth.w	r5, r8
 8000cc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cca:	fb02 3310 	mls	r3, r2, r0, r3
 8000cce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cd2:	fb00 f30c 	mul.w	r3, r0, ip
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x1e6>
 8000cda:	19ed      	adds	r5, r5, r7
 8000cdc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce0:	d26f      	bcs.n	8000dc2 <__udivmoddi4+0x2be>
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0x2be>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	443d      	add	r5, r7
 8000cea:	1aeb      	subs	r3, r5, r3
 8000cec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf0:	e78f      	b.n	8000c12 <__udivmoddi4+0x10e>
 8000cf2:	f1c1 0720 	rsb	r7, r1, #32
 8000cf6:	fa22 f807 	lsr.w	r8, r2, r7
 8000cfa:	408b      	lsls	r3, r1
 8000cfc:	fa05 f401 	lsl.w	r4, r5, r1
 8000d00:	ea48 0303 	orr.w	r3, r8, r3
 8000d04:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d08:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d12:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d16:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d1a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d1e:	fa1f f883 	uxth.w	r8, r3
 8000d22:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d26:	fb09 f408 	mul.w	r4, r9, r8
 8000d2a:	42ac      	cmp	r4, r5
 8000d2c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d30:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x244>
 8000d36:	18ed      	adds	r5, r5, r3
 8000d38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d3c:	d243      	bcs.n	8000dc6 <__udivmoddi4+0x2c2>
 8000d3e:	42ac      	cmp	r4, r5
 8000d40:	d941      	bls.n	8000dc6 <__udivmoddi4+0x2c2>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	441d      	add	r5, r3
 8000d48:	1b2d      	subs	r5, r5, r4
 8000d4a:	fa1f fe8e 	uxth.w	lr, lr
 8000d4e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d52:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d56:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d5a:	fb00 f808 	mul.w	r8, r0, r8
 8000d5e:	45a0      	cmp	r8, r4
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x26e>
 8000d62:	18e4      	adds	r4, r4, r3
 8000d64:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d68:	d229      	bcs.n	8000dbe <__udivmoddi4+0x2ba>
 8000d6a:	45a0      	cmp	r8, r4
 8000d6c:	d927      	bls.n	8000dbe <__udivmoddi4+0x2ba>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	441c      	add	r4, r3
 8000d72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d76:	eba4 0408 	sub.w	r4, r4, r8
 8000d7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7e:	454c      	cmp	r4, r9
 8000d80:	46c6      	mov	lr, r8
 8000d82:	464d      	mov	r5, r9
 8000d84:	d315      	bcc.n	8000db2 <__udivmoddi4+0x2ae>
 8000d86:	d012      	beq.n	8000dae <__udivmoddi4+0x2aa>
 8000d88:	b156      	cbz	r6, 8000da0 <__udivmoddi4+0x29c>
 8000d8a:	ebba 030e 	subs.w	r3, sl, lr
 8000d8e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d92:	fa04 f707 	lsl.w	r7, r4, r7
 8000d96:	40cb      	lsrs	r3, r1
 8000d98:	431f      	orrs	r7, r3
 8000d9a:	40cc      	lsrs	r4, r1
 8000d9c:	6037      	str	r7, [r6, #0]
 8000d9e:	6074      	str	r4, [r6, #4]
 8000da0:	2100      	movs	r1, #0
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	4618      	mov	r0, r3
 8000da8:	e6f8      	b.n	8000b9c <__udivmoddi4+0x98>
 8000daa:	4690      	mov	r8, r2
 8000dac:	e6e0      	b.n	8000b70 <__udivmoddi4+0x6c>
 8000dae:	45c2      	cmp	sl, r8
 8000db0:	d2ea      	bcs.n	8000d88 <__udivmoddi4+0x284>
 8000db2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db6:	eb69 0503 	sbc.w	r5, r9, r3
 8000dba:	3801      	subs	r0, #1
 8000dbc:	e7e4      	b.n	8000d88 <__udivmoddi4+0x284>
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	e7d7      	b.n	8000d72 <__udivmoddi4+0x26e>
 8000dc2:	4640      	mov	r0, r8
 8000dc4:	e791      	b.n	8000cea <__udivmoddi4+0x1e6>
 8000dc6:	4681      	mov	r9, r0
 8000dc8:	e7be      	b.n	8000d48 <__udivmoddi4+0x244>
 8000dca:	4601      	mov	r1, r0
 8000dcc:	e778      	b.n	8000cc0 <__udivmoddi4+0x1bc>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	e745      	b.n	8000c60 <__udivmoddi4+0x15c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e708      	b.n	8000bea <__udivmoddi4+0xe6>
 8000dd8:	f1a8 0802 	sub.w	r8, r8, #2
 8000ddc:	443d      	add	r5, r7
 8000dde:	e72b      	b.n	8000c38 <__udivmoddi4+0x134>

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_InitTick+0x3c>)
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_InitTick+0x40>)
{
 8000dea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	7818      	ldrb	r0, [r3, #0]
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000df6:	6810      	ldr	r0, [r2, #0]
 8000df8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dfc:	f000 fad2 	bl	80013a4 <HAL_SYSTICK_Config>
 8000e00:	4604      	mov	r4, r0
 8000e02:	b958      	cbnz	r0, 8000e1c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e04:	2d0f      	cmp	r5, #15
 8000e06:	d809      	bhi.n	8000e1c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 fa88 	bl	8001324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_InitTick+0x44>)
 8000e16:	4620      	mov	r0, r4
 8000e18:	601d      	str	r5, [r3, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_Init>:
{
 8000e2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x30>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 fa59 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff ffc8 	bl	8000de4 <HAL_InitTick>
  HAL_MspInit();
 8000e54:	f001 fdee 	bl	8002a34 <HAL_MspInit>
}
 8000e58:	2000      	movs	r0, #0
 8000e5a:	bd08      	pop	{r3, pc}
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e60:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <HAL_IncTick+0x10>)
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_IncTick+0x14>)
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	440b      	add	r3, r1
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000cc 	.word	0x200000cc
 8000e74:	20000000 	.word	0x20000000

08000e78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e78:	4b01      	ldr	r3, [pc, #4]	; (8000e80 <HAL_GetTick+0x8>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200000cc 	.word	0x200000cc

08000e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e86:	4604      	mov	r4, r0
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	f000 8099 	beq.w	8000fc0 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e90:	b923      	cbnz	r3, 8000e9c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e92:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e98:	f001 fc40 	bl	800271c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	06db      	lsls	r3, r3, #27
 8000ea0:	f100 808c 	bmi.w	8000fbc <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eaa:	f023 0302 	bic.w	r3, r3, #2
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_ADC_Init+0x140>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ebc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	6861      	ldr	r1, [r4, #4]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ec6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ec8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ed8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eda:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000edc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ede:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ee2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000eec:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efa:	4933      	ldr	r1, [pc, #204]	; (8000fc8 <HAL_ADC_Init+0x144>)
 8000efc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000efe:	428a      	cmp	r2, r1
 8000f00:	d050      	beq.n	8000fa4 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f02:	6899      	ldr	r1, [r3, #8]
 8000f04:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000f08:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f0a:	6899      	ldr	r1, [r3, #8]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f10:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f1e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f20:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000f22:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f24:	f022 0202 	bic.w	r2, r2, #2
 8000f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f32:	6a22      	ldr	r2, [r4, #32]
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d03d      	beq.n	8000fb4 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f38:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f40:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f48:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	3901      	subs	r1, #1
 8000f4e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f56:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f58:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	3901      	subs	r1, #1
 8000f62:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f68:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000f6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000f78:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f7a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f7c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f84:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f88:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000f8c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000fa2:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fb2:	e7b4      	b.n	8000f1e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fba:	e7ca      	b.n	8000f52 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	e7ed      	b.n	8000f9c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000fc0:	2001      	movs	r0, #1
}
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	40012300 	.word	0x40012300
 8000fc8:	0f000001 	.word	0x0f000001

08000fcc <HAL_ADC_Start_IT>:
{
 8000fcc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000fd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d054      	beq.n	8001084 <HAL_ADC_Start_IT+0xb8>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fe0:	6803      	ldr	r3, [r0, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	07d1      	lsls	r1, r2, #31
 8000fe6:	d505      	bpl.n	8000ff4 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	07d2      	lsls	r2, r2, #31
 8000fec:	d414      	bmi.n	8001018 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000fee:	2000      	movs	r0, #0
}
 8000ff0:	b002      	add	sp, #8
 8000ff2:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000ff4:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff6:	4924      	ldr	r1, [pc, #144]	; (8001088 <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ffe:	4a23      	ldr	r2, [pc, #140]	; (800108c <HAL_ADC_Start_IT+0xc0>)
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	fbb2 f2f1 	udiv	r2, r2, r1
 8001006:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800100a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800100c:	9a01      	ldr	r2, [sp, #4]
 800100e:	2a00      	cmp	r2, #0
 8001010:	d0ea      	beq.n	8000fe8 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8001012:	9a01      	ldr	r2, [sp, #4]
 8001014:	3a01      	subs	r2, #1
 8001016:	e7f8      	b.n	800100a <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001018:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800101a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001026:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800102c:	bf41      	itttt	mi
 800102e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8001030:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001034:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001038:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800103a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800103c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001040:	bf1c      	itt	ne
 8001042:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001044:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001048:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800104a:	2200      	movs	r2, #0
 800104c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001050:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001054:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_ADC_Start_IT+0xc4>)
 8001064:	6852      	ldr	r2, [r2, #4]
 8001066:	06d2      	lsls	r2, r2, #27
 8001068:	d108      	bne.n	800107c <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800106a:	6898      	ldr	r0, [r3, #8]
 800106c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001070:	d1bd      	bne.n	8000fee <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	e7b9      	b.n	8000ff0 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_ADC_Start_IT+0xc8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d1b5      	bne.n	8000fee <HAL_ADC_Start_IT+0x22>
 8001082:	e7f2      	b.n	800106a <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 8001084:	2002      	movs	r0, #2
 8001086:	e7b3      	b.n	8000ff0 <HAL_ADC_Start_IT+0x24>
 8001088:	000f4240 	.word	0x000f4240
 800108c:	20000008 	.word	0x20000008
 8001090:	40012300 	.word	0x40012300
 8001094:	40012000 	.word	0x40012000

08001098 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001098:	6803      	ldr	r3, [r0, #0]
 800109a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800109c:	4770      	bx	lr

0800109e <HAL_ADC_LevelOutOfWindowCallback>:
 800109e:	4770      	bx	lr

080010a0 <HAL_ADC_ErrorCallback>:
{
 80010a0:	4770      	bx	lr

080010a2 <HAL_ADC_IRQHandler>:
{
 80010a2:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80010a4:	6803      	ldr	r3, [r0, #0]
 80010a6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80010a8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010aa:	078d      	lsls	r5, r1, #30
{
 80010ac:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80010ae:	d52b      	bpl.n	8001108 <HAL_ADC_IRQHandler+0x66>
 80010b0:	0690      	lsls	r0, r2, #26
 80010b2:	d529      	bpl.n	8001108 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010b6:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010b8:	bf5e      	ittt	pl
 80010ba:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80010bc:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80010c0:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80010c8:	d117      	bne.n	80010fa <HAL_ADC_IRQHandler+0x58>
 80010ca:	69a2      	ldr	r2, [r4, #24]
 80010cc:	b9aa      	cbnz	r2, 80010fa <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010d0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80010d4:	d002      	beq.n	80010dc <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010d6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010d8:	0552      	lsls	r2, r2, #21
 80010da:	d40e      	bmi.n	80010fa <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	f022 0220 	bic.w	r2, r2, #32
 80010e2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ea:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ee:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f0:	bf5e      	ittt	pl
 80010f2:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80010f4:	f043 0301 	orrpl.w	r3, r3, #1
 80010f8:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80010fa:	4620      	mov	r0, r4
 80010fc:	f001 fc68 	bl	80029d0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	f06f 0212 	mvn.w	r2, #18
 8001106:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800110c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800110e:	074d      	lsls	r5, r1, #29
 8001110:	d532      	bpl.n	8001178 <HAL_ADC_IRQHandler+0xd6>
 8001112:	0610      	lsls	r0, r2, #24
 8001114:	d530      	bpl.n	8001178 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001116:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001118:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800111a:	bf5e      	ittt	pl
 800111c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800111e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001122:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800112a:	d11e      	bne.n	800116a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800112c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800112e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001132:	d002      	beq.n	800113a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001134:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001136:	0552      	lsls	r2, r2, #21
 8001138:	d417      	bmi.n	800116a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800113a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800113c:	0555      	lsls	r5, r2, #21
 800113e:	d414      	bmi.n	800116a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001140:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001142:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001146:	d110      	bne.n	800116a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001148:	69a2      	ldr	r2, [r4, #24]
 800114a:	b972      	cbnz	r2, 800116a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001152:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800115a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800115c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115e:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001160:	bf5e      	ittt	pl
 8001162:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001164:	f043 0301 	orrpl.w	r3, r3, #1
 8001168:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800116a:	4620      	mov	r0, r4
 800116c:	f000 f8c6 	bl	80012fc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f06f 020c 	mvn.w	r2, #12
 8001176:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800117c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800117e:	07c9      	lsls	r1, r1, #31
 8001180:	d50f      	bpl.n	80011a2 <HAL_ADC_IRQHandler+0x100>
 8001182:	0655      	lsls	r5, r2, #25
 8001184:	d50d      	bpl.n	80011a2 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	07d8      	lsls	r0, r3, #31
 800118a:	d50a      	bpl.n	80011a2 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800118c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800118e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001192:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ff82 	bl	800109e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f06f 0201 	mvn.w	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80011a6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80011a8:	0689      	lsls	r1, r1, #26
 80011aa:	d50d      	bpl.n	80011c8 <HAL_ADC_IRQHandler+0x126>
 80011ac:	0152      	lsls	r2, r2, #5
 80011ae:	d50b      	bpl.n	80011c8 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011b2:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011b6:	f042 0202 	orr.w	r2, r2, #2
 80011ba:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 80011bc:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011be:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80011c0:	f7ff ff6e 	bl	80010a0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	601d      	str	r5, [r3, #0]
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080011cc <HAL_ADC_ConfigChannel>:
{
 80011cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d06a      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011da:	680d      	ldr	r5, [r1, #0]
 80011dc:	6804      	ldr	r4, [r0, #0]
 80011de:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80011e0:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e2:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80011e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80011e8:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ea:	d92a      	bls.n	8001242 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80011f0:	68e7      	ldr	r7, [r4, #12]
 80011f2:	3b1e      	subs	r3, #30
 80011f4:	f04f 0e07 	mov.w	lr, #7
 80011f8:	fa0e fe03 	lsl.w	lr, lr, r3
 80011fc:	ea27 070e 	bic.w	r7, r7, lr
 8001200:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001202:	68e7      	ldr	r7, [r4, #12]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	433b      	orrs	r3, r7
 800120a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800120c:	684a      	ldr	r2, [r1, #4]
 800120e:	2a06      	cmp	r2, #6
 8001210:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001214:	d825      	bhi.n	8001262 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001216:	4413      	add	r3, r2
 8001218:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800121a:	1f59      	subs	r1, r3, #5
 800121c:	231f      	movs	r3, #31
 800121e:	408b      	lsls	r3, r1
 8001220:	ea27 0303 	bic.w	r3, r7, r3
 8001224:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001226:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001228:	fa06 f101 	lsl.w	r1, r6, r1
 800122c:	4311      	orrs	r1, r2
 800122e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_ADC_ConfigChannel+0x11c>)
 8001232:	429c      	cmp	r4, r3
 8001234:	d034      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8001236:	2300      	movs	r3, #0
 8001238:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800123c:	4618      	mov	r0, r3
}
 800123e:	b003      	add	sp, #12
 8001240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001242:	6927      	ldr	r7, [r4, #16]
 8001244:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001248:	f04f 0e07 	mov.w	lr, #7
 800124c:	fa0e fe03 	lsl.w	lr, lr, r3
 8001250:	ea27 070e 	bic.w	r7, r7, lr
 8001254:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001256:	6927      	ldr	r7, [r4, #16]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	433b      	orrs	r3, r7
 800125e:	6123      	str	r3, [r4, #16]
 8001260:	e7d4      	b.n	800120c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001262:	2a0c      	cmp	r2, #12
 8001264:	d80e      	bhi.n	8001284 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001266:	4413      	add	r3, r2
 8001268:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800126a:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800126e:	231f      	movs	r3, #31
 8001270:	4093      	lsls	r3, r2
 8001272:	ea21 0303 	bic.w	r3, r1, r3
 8001276:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001278:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800127a:	fa06 f202 	lsl.w	r2, r6, r2
 800127e:	431a      	orrs	r2, r3
 8001280:	6322      	str	r2, [r4, #48]	; 0x30
 8001282:	e7d5      	b.n	8001230 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001284:	4413      	add	r3, r2
 8001286:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001288:	3b41      	subs	r3, #65	; 0x41
 800128a:	221f      	movs	r2, #31
 800128c:	409a      	lsls	r2, r3
 800128e:	ea21 0202 	bic.w	r2, r1, r2
 8001292:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001294:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001296:	fa06 f103 	lsl.w	r1, r6, r3
 800129a:	4311      	orrs	r1, r2
 800129c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800129e:	e7c7      	b.n	8001230 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012a0:	2d12      	cmp	r5, #18
 80012a2:	d107      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_ADC_ConfigChannel+0x120>)
 80012a6:	6853      	ldr	r3, [r2, #4]
 80012a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ac:	6053      	str	r3, [r2, #4]
 80012ae:	e7c2      	b.n	8001236 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80012b0:	2002      	movs	r0, #2
 80012b2:	e7c4      	b.n	800123e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_ADC_ConfigChannel+0x124>)
 80012b6:	429d      	cmp	r5, r3
 80012b8:	d001      	beq.n	80012be <HAL_ADC_ConfigChannel+0xf2>
 80012ba:	2d11      	cmp	r5, #17
 80012bc:	d1bb      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012be:	490b      	ldr	r1, [pc, #44]	; (80012ec <HAL_ADC_ConfigChannel+0x120>)
 80012c0:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012c2:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012c8:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012ca:	d1b4      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_ADC_ConfigChannel+0x128>)
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_ADC_ConfigChannel+0x12c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80012d6:	230a      	movs	r3, #10
 80012d8:	4353      	muls	r3, r2
        counter--;
 80012da:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80012dc:	9b01      	ldr	r3, [sp, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0a9      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	e7f8      	b.n	80012da <HAL_ADC_ConfigChannel+0x10e>
 80012e8:	40012000 	.word	0x40012000
 80012ec:	40012300 	.word	0x40012300
 80012f0:	10000012 	.word	0x10000012
 80012f4:	20000008 	.word	0x20000008
 80012f8:	000f4240 	.word	0x000f4240

080012fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001302:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	0c1b      	lsrs	r3, r3, #16
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001310:	0200      	lsls	r0, r0, #8
 8001312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001316:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800131a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800131c:	60d3      	str	r3, [r2, #12]
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b530      	push	{r4, r5, lr}
 8001328:	68dc      	ldr	r4, [r3, #12]
 800132a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	2b04      	cmp	r3, #4
 8001336:	bf28      	it	cs
 8001338:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 0501 	mov.w	r5, #1
 8001340:	fa05 f303 	lsl.w	r3, r5, r3
 8001344:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001348:	bf8c      	ite	hi
 800134a:	3c03      	subhi	r4, #3
 800134c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134e:	4019      	ands	r1, r3
 8001350:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001352:	fa05 f404 	lsl.w	r4, r5, r4
 8001356:	3c01      	subs	r4, #1
 8001358:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800135a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	ea42 0201 	orr.w	r2, r2, r1
 8001360:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	bfaf      	iteee	ge
 8001366:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	f000 000f 	andlt.w	r0, r0, #15
 800136e:	4b06      	ldrlt	r3, [pc, #24]	; (8001388 <HAL_NVIC_SetPriority+0x64>)
 8001370:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	bfa5      	ittet	ge
 8001374:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001378:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001380:	bd30      	pop	{r4, r5, pc}
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	e000ed14 	.word	0xe000ed14

0800138c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800138c:	0942      	lsrs	r2, r0, #5
 800138e:	2301      	movs	r3, #1
 8001390:	f000 001f 	and.w	r0, r0, #31
 8001394:	fa03 f000 	lsl.w	r0, r3, r0
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <HAL_NVIC_EnableIRQ+0x14>)
 800139a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	3801      	subs	r0, #1
 80013a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013aa:	d20a      	bcs.n	80013c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	21f0      	movs	r1, #240	; 0xf0
 80013b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013d2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013d4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013d6:	bf0c      	ite	eq
 80013d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013dc:	f022 0204 	bicne.w	r2, r2, #4
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	4770      	bx	lr
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013e8:	4770      	bx	lr

080013ea <HAL_SYSTICK_IRQHandler>:
{
 80013ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80013ec:	f7ff fffc 	bl	80013e8 <HAL_SYSTICK_Callback>
 80013f0:	bd08      	pop	{r3, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80015c4 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80015c8 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001408:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800140a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001410:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001414:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001418:	45b6      	cmp	lr, r6
 800141a:	f040 80b6 	bne.w	800158a <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141e:	684c      	ldr	r4, [r1, #4]
 8001420:	f024 0710 	bic.w	r7, r4, #16
 8001424:	2f02      	cmp	r7, #2
 8001426:	d116      	bne.n	8001456 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001428:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800142c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001430:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001434:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001438:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800143c:	f04f 0c0f 	mov.w	ip, #15
 8001440:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001444:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001448:	690d      	ldr	r5, [r1, #16]
 800144a:	fa05 f50b 	lsl.w	r5, r5, fp
 800144e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001452:	f8ca 5020 	str.w	r5, [sl, #32]
 8001456:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800145c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001460:	fa05 f50a 	lsl.w	r5, r5, sl
 8001464:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001466:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001472:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001474:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001478:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800147a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147e:	d811      	bhi.n	80014a4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001480:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001482:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	68cf      	ldr	r7, [r1, #12]
 8001488:	fa07 fc0a 	lsl.w	ip, r7, sl
 800148c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001490:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001492:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001498:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800149c:	409f      	lsls	r7, r3
 800149e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80014a2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80014a4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	688f      	ldr	r7, [r1, #8]
 80014aa:	fa07 f70a 	lsl.w	r7, r7, sl
 80014ae:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80014b0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	00e5      	lsls	r5, r4, #3
 80014b4:	d569      	bpl.n	800158a <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	f04f 0b00 	mov.w	fp, #0
 80014ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80014be:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c2:	4d3f      	ldr	r5, [pc, #252]	; (80015c0 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80014c8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80014cc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80014d0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80014d4:	9703      	str	r7, [sp, #12]
 80014d6:	9f03      	ldr	r7, [sp, #12]
 80014d8:	f023 0703 	bic.w	r7, r3, #3
 80014dc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80014e0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80014e8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014f0:	f04f 0e0f 	mov.w	lr, #15
 80014f4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fa:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fe:	d04b      	beq.n	8001598 <HAL_GPIO_Init+0x1a4>
 8001500:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001504:	42a8      	cmp	r0, r5
 8001506:	d049      	beq.n	800159c <HAL_GPIO_Init+0x1a8>
 8001508:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800150c:	42a8      	cmp	r0, r5
 800150e:	d047      	beq.n	80015a0 <HAL_GPIO_Init+0x1ac>
 8001510:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001514:	42a8      	cmp	r0, r5
 8001516:	d045      	beq.n	80015a4 <HAL_GPIO_Init+0x1b0>
 8001518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800151c:	42a8      	cmp	r0, r5
 800151e:	d043      	beq.n	80015a8 <HAL_GPIO_Init+0x1b4>
 8001520:	4548      	cmp	r0, r9
 8001522:	d043      	beq.n	80015ac <HAL_GPIO_Init+0x1b8>
 8001524:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001528:	42a8      	cmp	r0, r5
 800152a:	d041      	beq.n	80015b0 <HAL_GPIO_Init+0x1bc>
 800152c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001530:	42a8      	cmp	r0, r5
 8001532:	d03f      	beq.n	80015b4 <HAL_GPIO_Init+0x1c0>
 8001534:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001538:	42a8      	cmp	r0, r5
 800153a:	d03d      	beq.n	80015b8 <HAL_GPIO_Init+0x1c4>
 800153c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001540:	42a8      	cmp	r0, r5
 8001542:	bf14      	ite	ne
 8001544:	250a      	movne	r5, #10
 8001546:	2509      	moveq	r5, #9
 8001548:	fa05 f50c 	lsl.w	r5, r5, ip
 800154c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001550:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001552:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001554:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001556:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800155a:	bf0c      	ite	eq
 800155c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800155e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001560:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001562:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001564:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001568:	bf0c      	ite	eq
 800156a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800156c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800156e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001570:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001572:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001576:	bf0c      	ite	eq
 8001578:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800157a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800157c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800157e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001580:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001582:	bf54      	ite	pl
 8001584:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001586:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001588:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	3301      	adds	r3, #1
 800158c:	2b10      	cmp	r3, #16
 800158e:	f47f af3c 	bne.w	800140a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001592:	b005      	add	sp, #20
 8001594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001598:	465d      	mov	r5, fp
 800159a:	e7d5      	b.n	8001548 <HAL_GPIO_Init+0x154>
 800159c:	2501      	movs	r5, #1
 800159e:	e7d3      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015a0:	2502      	movs	r5, #2
 80015a2:	e7d1      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015a4:	2503      	movs	r5, #3
 80015a6:	e7cf      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015a8:	2504      	movs	r5, #4
 80015aa:	e7cd      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015ac:	2505      	movs	r5, #5
 80015ae:	e7cb      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015b0:	2506      	movs	r5, #6
 80015b2:	e7c9      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015b4:	2507      	movs	r5, #7
 80015b6:	e7c7      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015b8:	2508      	movs	r5, #8
 80015ba:	e7c5      	b.n	8001548 <HAL_GPIO_Init+0x154>
 80015bc:	40013c00 	.word	0x40013c00
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021400 	.word	0x40021400

080015cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015d4:	4c18      	ldr	r4, [pc, #96]	; (8001638 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_PWREx_EnableOverDrive+0x70>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80015ee:	f7ff fc43 	bl	8000e78 <HAL_GetTick>
 80015f2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	03da      	lsls	r2, r3, #15
 80015f8:	d50b      	bpl.n	8001612 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015fc:	4c0e      	ldr	r4, [pc, #56]	; (8001638 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001602:	f7ff fc39 	bl	8000e78 <HAL_GetTick>
 8001606:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001608:	6863      	ldr	r3, [r4, #4]
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	d50a      	bpl.n	8001624 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800160e:	2000      	movs	r0, #0
 8001610:	e006      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001612:	f7ff fc31 	bl	8000e78 <HAL_GetTick>
 8001616:	1b40      	subs	r0, r0, r5
 8001618:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800161c:	d9ea      	bls.n	80015f4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
}
 8001620:	b003      	add	sp, #12
 8001622:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001624:	f7ff fc28 	bl	8000e78 <HAL_GetTick>
 8001628:	1b40      	subs	r0, r0, r5
 800162a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800162e:	d9eb      	bls.n	8001608 <HAL_PWREx_EnableOverDrive+0x3c>
 8001630:	e7f5      	b.n	800161e <HAL_PWREx_EnableOverDrive+0x52>
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000
 800163c:	420e0040 	.word	0x420e0040
 8001640:	420e0044 	.word	0x420e0044

08001644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	4604      	mov	r4, r0
 800164a:	b918      	cbnz	r0, 8001654 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800164c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800164e:	b002      	add	sp, #8
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001654:	6803      	ldr	r3, [r0, #0]
 8001656:	07dd      	lsls	r5, r3, #31
 8001658:	d410      	bmi.n	800167c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	0798      	lsls	r0, r3, #30
 800165e:	d458      	bmi.n	8001712 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	071a      	lsls	r2, r3, #28
 8001664:	f100 809a 	bmi.w	800179c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	075b      	lsls	r3, r3, #29
 800166c:	f100 80b8 	bmi.w	80017e0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001670:	69a2      	ldr	r2, [r4, #24]
 8001672:	2a00      	cmp	r2, #0
 8001674:	f040 8119 	bne.w	80018aa <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001678:	2000      	movs	r0, #0
 800167a:	e7e8      	b.n	800164e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167c:	4ba6      	ldr	r3, [pc, #664]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	f002 020c 	and.w	r2, r2, #12
 8001684:	2a04      	cmp	r2, #4
 8001686:	d007      	beq.n	8001698 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168e:	2a08      	cmp	r2, #8
 8001690:	d10a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0259      	lsls	r1, r3, #9
 8001696:	d507      	bpl.n	80016a8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	4b9f      	ldr	r3, [pc, #636]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	039a      	lsls	r2, r3, #14
 800169e:	d5dc      	bpl.n	800165a <HAL_RCC_OscConfig+0x16>
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1d9      	bne.n	800165a <HAL_RCC_OscConfig+0x16>
 80016a6:	e7d1      	b.n	800164c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	4d9b      	ldr	r5, [pc, #620]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d111      	bne.n	80016d6 <HAL_RCC_OscConfig+0x92>
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016ba:	f7ff fbdd 	bl	8000e78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4d96      	ldr	r5, [pc, #600]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	682b      	ldr	r3, [r5, #0]
 80016c4:	039b      	lsls	r3, r3, #14
 80016c6:	d4c8      	bmi.n	800165a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fbd6 	bl	8000e78 <HAL_GetTick>
 80016cc:	1b80      	subs	r0, r0, r6
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9f7      	bls.n	80016c2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80016d2:	2003      	movs	r0, #3
 80016d4:	e7bb      	b.n	800164e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016da:	d104      	bne.n	80016e6 <HAL_RCC_OscConfig+0xa2>
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e2:	602b      	str	r3, [r5, #0]
 80016e4:	e7e5      	b.n	80016b2 <HAL_RCC_OscConfig+0x6e>
 80016e6:	682a      	ldr	r2, [r5, #0]
 80016e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ec:	602a      	str	r2, [r5, #0]
 80016ee:	682a      	ldr	r2, [r5, #0]
 80016f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016f4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1df      	bne.n	80016ba <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80016fa:	f7ff fbbd 	bl	8000e78 <HAL_GetTick>
 80016fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	039f      	lsls	r7, r3, #14
 8001704:	d5a9      	bpl.n	800165a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001706:	f7ff fbb7 	bl	8000e78 <HAL_GetTick>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	2864      	cmp	r0, #100	; 0x64
 800170e:	d9f7      	bls.n	8001700 <HAL_RCC_OscConfig+0xbc>
 8001710:	e7df      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001712:	4b81      	ldr	r3, [pc, #516]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	f012 0f0c 	tst.w	r2, #12
 800171a:	d007      	beq.n	800172c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001722:	2a08      	cmp	r2, #8
 8001724:	d111      	bne.n	800174a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	025e      	lsls	r6, r3, #9
 800172a:	d40e      	bmi.n	800174a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172c:	4b7a      	ldr	r3, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	0795      	lsls	r5, r2, #30
 8001732:	d502      	bpl.n	800173a <HAL_RCC_OscConfig+0xf6>
 8001734:	68e2      	ldr	r2, [r4, #12]
 8001736:	2a01      	cmp	r2, #1
 8001738:	d188      	bne.n	800164c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6921      	ldr	r1, [r4, #16]
 800173e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001742:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001746:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001748:	e78a      	b.n	8001660 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800174a:	68e2      	ldr	r2, [r4, #12]
 800174c:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x2d8>)
 800174e:	b1b2      	cbz	r2, 800177e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001754:	f7ff fb90 	bl	8000e78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	4d6f      	ldr	r5, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800175a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	0798      	lsls	r0, r3, #30
 8001760:	d507      	bpl.n	8001772 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	6922      	ldr	r2, [r4, #16]
 8001766:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800176a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800176e:	602b      	str	r3, [r5, #0]
 8001770:	e776      	b.n	8001660 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fb81 	bl	8000e78 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	2802      	cmp	r0, #2
 800177a:	d9ef      	bls.n	800175c <HAL_RCC_OscConfig+0x118>
 800177c:	e7a9      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800177e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001780:	f7ff fb7a 	bl	8000e78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001784:	4d64      	ldr	r5, [pc, #400]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001786:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	0799      	lsls	r1, r3, #30
 800178c:	f57f af68 	bpl.w	8001660 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff fb72 	bl	8000e78 <HAL_GetTick>
 8001794:	1b80      	subs	r0, r0, r6
 8001796:	2802      	cmp	r0, #2
 8001798:	d9f6      	bls.n	8001788 <HAL_RCC_OscConfig+0x144>
 800179a:	e79a      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179c:	6962      	ldr	r2, [r4, #20]
 800179e:	4b60      	ldr	r3, [pc, #384]	; (8001920 <HAL_RCC_OscConfig+0x2dc>)
 80017a0:	b17a      	cbz	r2, 80017c2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017a6:	f7ff fb67 	bl	8000e78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4d5b      	ldr	r5, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80017ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017b0:	079f      	lsls	r7, r3, #30
 80017b2:	f53f af59 	bmi.w	8001668 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fb5f 	bl	8000e78 <HAL_GetTick>
 80017ba:	1b80      	subs	r0, r0, r6
 80017bc:	2802      	cmp	r0, #2
 80017be:	d9f6      	bls.n	80017ae <HAL_RCC_OscConfig+0x16a>
 80017c0:	e787      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80017c2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017c4:	f7ff fb58 	bl	8000e78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4d53      	ldr	r5, [pc, #332]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80017ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017ce:	0798      	lsls	r0, r3, #30
 80017d0:	f57f af4a 	bpl.w	8001668 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb50 	bl	8000e78 <HAL_GetTick>
 80017d8:	1b80      	subs	r0, r0, r6
 80017da:	2802      	cmp	r0, #2
 80017dc:	d9f6      	bls.n	80017cc <HAL_RCC_OscConfig+0x188>
 80017de:	e778      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 80017e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80017e8:	d128      	bne.n	800183c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	9201      	str	r2, [sp, #4]
 80017ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017fe:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	4d48      	ldr	r5, [pc, #288]	; (8001924 <HAL_RCC_OscConfig+0x2e0>)
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	05d9      	lsls	r1, r3, #23
 8001806:	d51b      	bpl.n	8001840 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	68a3      	ldr	r3, [r4, #8]
 800180a:	4d43      	ldr	r5, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 800180c:	2b01      	cmp	r3, #1
 800180e:	d127      	bne.n	8001860 <HAL_RCC_OscConfig+0x21c>
 8001810:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001818:	f7ff fb2e 	bl	8000e78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4d3e      	ldr	r5, [pc, #248]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800181e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001826:	079b      	lsls	r3, r3, #30
 8001828:	d539      	bpl.n	800189e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800182a:	2e00      	cmp	r6, #0
 800182c:	f43f af20 	beq.w	8001670 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4a39      	ldr	r2, [pc, #228]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 8001832:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	e719      	b.n	8001670 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800183c:	2600      	movs	r6, #0
 800183e:	e7df      	b.n	8001800 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001848:	f7ff fb16 	bl	8000e78 <HAL_GetTick>
 800184c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	05da      	lsls	r2, r3, #23
 8001852:	d4d9      	bmi.n	8001808 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fb10 	bl	8000e78 <HAL_GetTick>
 8001858:	1bc0      	subs	r0, r0, r7
 800185a:	2802      	cmp	r0, #2
 800185c:	d9f7      	bls.n	800184e <HAL_RCC_OscConfig+0x20a>
 800185e:	e738      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	2b05      	cmp	r3, #5
 8001862:	d104      	bne.n	800186e <HAL_RCC_OscConfig+0x22a>
 8001864:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	672b      	str	r3, [r5, #112]	; 0x70
 800186c:	e7d0      	b.n	8001810 <HAL_RCC_OscConfig+0x1cc>
 800186e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	672a      	str	r2, [r5, #112]	; 0x70
 8001876:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001878:	f022 0204 	bic.w	r2, r2, #4
 800187c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ca      	bne.n	8001818 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001882:	f7ff faf9 	bl	8000e78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800188a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800188e:	0798      	lsls	r0, r3, #30
 8001890:	d5cb      	bpl.n	800182a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff faf1 	bl	8000e78 <HAL_GetTick>
 8001896:	1bc0      	subs	r0, r0, r7
 8001898:	4540      	cmp	r0, r8
 800189a:	d9f7      	bls.n	800188c <HAL_RCC_OscConfig+0x248>
 800189c:	e719      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff faeb 	bl	8000e78 <HAL_GetTick>
 80018a2:	1bc0      	subs	r0, r0, r7
 80018a4:	4540      	cmp	r0, r8
 80018a6:	d9bd      	bls.n	8001824 <HAL_RCC_OscConfig+0x1e0>
 80018a8:	e713      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018aa:	4d1b      	ldr	r5, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
 80018ac:	68ab      	ldr	r3, [r5, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	f43f aeca 	beq.w	800164c <HAL_RCC_OscConfig+0x8>
 80018b8:	4e1b      	ldr	r6, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x2e4>)
 80018ba:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018bc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018be:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c0:	d134      	bne.n	800192c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80018c2:	f7ff fad9 	bl	8000e78 <HAL_GetTick>
 80018c6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	0199      	lsls	r1, r3, #6
 80018cc:	d41e      	bmi.n	800190c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ce:	6a22      	ldr	r2, [r4, #32]
 80018d0:	69e3      	ldr	r3, [r4, #28]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018d6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4c0d      	ldr	r4, [pc, #52]	; (8001918 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e4:	0852      	lsrs	r2, r2, #1
 80018e6:	3a01      	subs	r2, #1
 80018e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018ec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018ee:	2301      	movs	r3, #1
 80018f0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018f2:	f7ff fac1 	bl	8000e78 <HAL_GetTick>
 80018f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	019a      	lsls	r2, r3, #6
 80018fc:	f53f aebc 	bmi.w	8001678 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff faba 	bl	8000e78 <HAL_GetTick>
 8001904:	1b40      	subs	r0, r0, r5
 8001906:	2802      	cmp	r0, #2
 8001908:	d9f6      	bls.n	80018f8 <HAL_RCC_OscConfig+0x2b4>
 800190a:	e6e2      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fab4 	bl	8000e78 <HAL_GetTick>
 8001910:	1bc0      	subs	r0, r0, r7
 8001912:	2802      	cmp	r0, #2
 8001914:	d9d8      	bls.n	80018c8 <HAL_RCC_OscConfig+0x284>
 8001916:	e6dc      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
 8001918:	40023800 	.word	0x40023800
 800191c:	42470000 	.word	0x42470000
 8001920:	42470e80 	.word	0x42470e80
 8001924:	40007000 	.word	0x40007000
 8001928:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800192c:	f7ff faa4 	bl	8000e78 <HAL_GetTick>
 8001930:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	f57f ae9f 	bpl.w	8001678 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fa9d 	bl	8000e78 <HAL_GetTick>
 800193e:	1b00      	subs	r0, r0, r4
 8001940:	2802      	cmp	r0, #2
 8001942:	d9f6      	bls.n	8001932 <HAL_RCC_OscConfig+0x2ee>
 8001944:	e6c5      	b.n	80016d2 <HAL_RCC_OscConfig+0x8e>
 8001946:	bf00      	nop

08001948 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4913      	ldr	r1, [pc, #76]	; (8001998 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800194a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	688b      	ldr	r3, [r1, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b04      	cmp	r3, #4
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x16>
 8001956:	2b08      	cmp	r3, #8
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800195c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800195e:	4810      	ldr	r0, [pc, #64]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001960:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001962:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001964:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001968:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196c:	bf14      	ite	ne
 800196e:	480c      	ldrne	r0, [pc, #48]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001970:	480a      	ldreq	r0, [pc, #40]	; (800199c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001976:	bf18      	it	ne
 8001978:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	fba1 0100 	umull	r0, r1, r1, r0
 8001982:	f7ff f8a7 	bl	8000ad4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCC_GetSysClockFreq+0x50>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001992:	fbb0 f0f3 	udiv	r0, r0, r3
 8001996:	bd08      	pop	{r3, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	00f42400 	.word	0x00f42400
 80019a0:	007a1200 	.word	0x007a1200

080019a4 <HAL_RCC_ClockConfig>:
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019aa:	4604      	mov	r4, r0
 80019ac:	b910      	cbnz	r0, 80019b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_RCC_ClockConfig+0x124>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f002 020f 	and.w	r2, r2, #15
 80019bc:	428a      	cmp	r2, r1
 80019be:	d328      	bcc.n	8001a12 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	6821      	ldr	r1, [r4, #0]
 80019c2:	078f      	lsls	r7, r1, #30
 80019c4:	d42d      	bmi.n	8001a22 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	07c8      	lsls	r0, r1, #31
 80019c8:	d440      	bmi.n	8001a4c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_ClockConfig+0x124>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f002 020f 	and.w	r2, r2, #15
 80019d2:	4295      	cmp	r5, r2
 80019d4:	d366      	bcc.n	8001aa4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	0751      	lsls	r1, r2, #29
 80019da:	d46c      	bmi.n	8001ab6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	0713      	lsls	r3, r2, #28
 80019de:	d507      	bpl.n	80019f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e0:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_RCC_ClockConfig+0x128>)
 80019e2:	6921      	ldr	r1, [r4, #16]
 80019e4:	6893      	ldr	r3, [r2, #8]
 80019e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f0:	f7ff ffaa 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_RCC_ClockConfig+0x128>)
 80019f6:	4a36      	ldr	r2, [pc, #216]	; (8001ad0 <HAL_RCC_ClockConfig+0x12c>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	40d8      	lsrs	r0, r3
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x130>)
 8001a04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff f9ec 	bl	8000de4 <HAL_InitTick>
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4299      	cmp	r1, r3
 8001a1e:	d1c6      	bne.n	80019ae <HAL_RCC_ClockConfig+0xa>
 8001a20:	e7ce      	b.n	80019c0 <HAL_RCC_ClockConfig+0x1c>
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	bf1e      	ittt	ne
 8001a2a:	689a      	ldrne	r2, [r3, #8]
 8001a2c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001a30:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	bf42      	ittt	mi
 8001a36:	689a      	ldrmi	r2, [r3, #8]
 8001a38:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001a3c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	68a0      	ldr	r0, [r4, #8]
 8001a42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a46:	4302      	orrs	r2, r0
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e7bc      	b.n	80019c6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4c:	6862      	ldr	r2, [r4, #4]
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_RCC_ClockConfig+0x128>)
 8001a50:	2a01      	cmp	r2, #1
 8001a52:	d11d      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	d0a8      	beq.n	80019ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5c:	4e1b      	ldr	r6, [pc, #108]	; (8001acc <HAL_RCC_ClockConfig+0x128>)
 8001a5e:	68b3      	ldr	r3, [r6, #8]
 8001a60:	f023 0303 	bic.w	r3, r3, #3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a68:	f7ff fa06 	bl	8000e78 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a70:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	68b3      	ldr	r3, [r6, #8]
 8001a74:	6862      	ldr	r2, [r4, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a7e:	d0a4      	beq.n	80019ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff f9fa 	bl	8000e78 <HAL_GetTick>
 8001a84:	1bc0      	subs	r0, r0, r7
 8001a86:	4540      	cmp	r0, r8
 8001a88:	d9f3      	bls.n	8001a72 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
}
 8001a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a90:	1e91      	subs	r1, r2, #2
 8001a92:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a94:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	d802      	bhi.n	8001a9e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a9c:	e7dd      	b.n	8001a5a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	f013 0f02 	tst.w	r3, #2
 8001aa2:	e7da      	b.n	8001a5a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	b2ea      	uxtb	r2, r5
 8001aa6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	429d      	cmp	r5, r3
 8001ab0:	f47f af7d 	bne.w	80019ae <HAL_RCC_ClockConfig+0xa>
 8001ab4:	e78f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <HAL_RCC_ClockConfig+0x128>)
 8001ab8:	68e0      	ldr	r0, [r4, #12]
 8001aba:	688b      	ldr	r3, [r1, #8]
 8001abc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	608b      	str	r3, [r1, #8]
 8001ac4:	e78a      	b.n	80019dc <HAL_RCC_ClockConfig+0x38>
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080035bb 	.word	0x080035bb
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001af2:	6810      	ldr	r0, [r2, #0]
}
 8001af4:	40d8      	lsrs	r0, r3
 8001af6:	4770      	bx	lr
 8001af8:	40023800 	.word	0x40023800
 8001afc:	080035cb 	.word	0x080035cb
 8001b00:	20000008 	.word	0x20000008

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b12:	6810      	ldr	r0, [r2, #0]
}
 8001b14:	40d8      	lsrs	r0, r3
 8001b16:	4770      	bx	lr
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	080035cb 	.word	0x080035cb
 8001b20:	20000008 	.word	0x20000008

08001b24 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b24:	6803      	ldr	r3, [r0, #0]
{
 8001b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b28:	079a      	lsls	r2, r3, #30
{
 8001b2a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b2c:	f040 8088 	bne.w	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	f013 0f0c 	tst.w	r3, #12
 8001b36:	d044      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b38:	4d80      	ldr	r5, [pc, #512]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b3a:	4e81      	ldr	r6, [pc, #516]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001b40:	f7ff f99a 	bl	8000e78 <HAL_GetTick>
 8001b44:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b46:	6833      	ldr	r3, [r6, #0]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f100 80bd 	bmi.w	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	074f      	lsls	r7, r1, #29
 8001b52:	d515      	bpl.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b54:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b56:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b5a:	6920      	ldr	r0, [r4, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001b62:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b6c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8001b70:	6a22      	ldr	r2, [r4, #32]
 8001b72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b76:	3a01      	subs	r2, #1
 8001b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b7c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b80:	070e      	lsls	r6, r1, #28
 8001b82:	d514      	bpl.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b84:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b86:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b88:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b8c:	6920      	ldr	r0, [r4, #16]
 8001b8e:	071b      	lsls	r3, r3, #28
 8001b90:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001b94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b9e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ba4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001bae:	2301      	movs	r3, #1
 8001bb0:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb2:	f7ff f961 	bl	8000e78 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bb6:	4d62      	ldr	r5, [pc, #392]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001bb8:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bba:	682b      	ldr	r3, [r5, #0]
 8001bbc:	0098      	lsls	r0, r3, #2
 8001bbe:	f140 808a 	bpl.w	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	069a      	lsls	r2, r3, #26
 8001bc6:	d531      	bpl.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bce:	4d5d      	ldr	r5, [pc, #372]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bea:	f7ff f945 	bl	8000e78 <HAL_GetTick>
 8001bee:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bf0:	682b      	ldr	r3, [r5, #0]
 8001bf2:	05d9      	lsls	r1, r3, #23
 8001bf4:	d576      	bpl.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bf6:	4d52      	ldr	r5, [pc, #328]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001bf8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bfa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bfe:	d177      	bne.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c02:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c06:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c0a:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8001c0c:	f040 8091 	bne.w	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8001c10:	6891      	ldr	r1, [r2, #8]
 8001c12:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001c16:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c1a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001c1e:	4301      	orrs	r1, r0
 8001c20:	6091      	str	r1, [r2, #8]
 8001c22:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c2c:	6820      	ldr	r0, [r4, #0]
 8001c2e:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c32:	bf1f      	itttt	ne
 8001c34:	4b44      	ldrne	r3, [pc, #272]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c36:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8001c3a:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8001c3c:	2000      	movne	r0, #0
 8001c3e:	e041      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c40:	4d42      	ldr	r5, [pc, #264]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c42:	4e3f      	ldr	r6, [pc, #252]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001c48:	f7ff f916 	bl	8000e78 <HAL_GetTick>
 8001c4c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c4e:	6833      	ldr	r3, [r6, #0]
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	d431      	bmi.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	07d7      	lsls	r7, r2, #31
 8001c58:	d506      	bpl.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001c5a:	68a3      	ldr	r3, [r4, #8]
 8001c5c:	6861      	ldr	r1, [r4, #4]
 8001c5e:	071b      	lsls	r3, r3, #28
 8001c60:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c64:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001c68:	0790      	lsls	r0, r2, #30
 8001c6a:	d515      	bpl.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c6c:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001c6e:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c70:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001c74:	6860      	ldr	r0, [r4, #4]
 8001c76:	061b      	lsls	r3, r3, #24
 8001c78:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001c7c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c80:	430b      	orrs	r3, r1
 8001c82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c86:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001c8a:	69e3      	ldr	r3, [r4, #28]
 8001c8c:	f021 011f 	bic.w	r1, r1, #31
 8001c90:	3b01      	subs	r3, #1
 8001c92:	430b      	orrs	r3, r1
 8001c94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8001c98:	2301      	movs	r3, #1
 8001c9a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f8ec 	bl	8000e78 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ca0:	4d27      	ldr	r5, [pc, #156]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8001ca2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	0119      	lsls	r1, r3, #4
 8001ca8:	f53f af42 	bmi.w	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cac:	f7ff f8e4 	bl	8000e78 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	2802      	cmp	r0, #2
 8001cb4:	d9f6      	bls.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001cb6:	e004      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cb8:	f7ff f8de 	bl	8000e78 <HAL_GetTick>
 8001cbc:	1bc0      	subs	r0, r0, r7
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d9c5      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8001cc2:	2003      	movs	r0, #3
}
 8001cc4:	b003      	add	sp, #12
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cc8:	f7ff f8d6 	bl	8000e78 <HAL_GetTick>
 8001ccc:	1bc0      	subs	r0, r0, r7
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	f67f af39 	bls.w	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001cd4:	e7f5      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cd6:	f7ff f8cf 	bl	8000e78 <HAL_GetTick>
 8001cda:	1b80      	subs	r0, r0, r6
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	f67f af6c 	bls.w	8001bba <HAL_RCCEx_PeriphCLKConfig+0x96>
 8001ce2:	e7ee      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7ff f8c8 	bl	8000e78 <HAL_GetTick>
 8001ce8:	1b80      	subs	r0, r0, r6
 8001cea:	2802      	cmp	r0, #2
 8001cec:	d980      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001cee:	e7e8      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cf2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d082      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cfa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d06:	2100      	movs	r1, #0
 8001d08:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001d0a:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d0e:	07da      	lsls	r2, r3, #31
 8001d10:	f57f af76 	bpl.w	8001c00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8001d14:	f7ff f8b0 	bl	8000e78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001d1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d20:	079b      	lsls	r3, r3, #30
 8001d22:	f53f af6d 	bmi.w	8001c00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff f8a7 	bl	8000e78 <HAL_GetTick>
 8001d2a:	1b80      	subs	r0, r0, r6
 8001d2c:	42b8      	cmp	r0, r7
 8001d2e:	d9f6      	bls.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001d30:	e7c7      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d32:	6891      	ldr	r1, [r2, #8]
 8001d34:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d38:	e772      	b.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001d3a:	bf00      	nop
 8001d3c:	42470070 	.word	0x42470070
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000
 8001d48:	424711e0 	.word	0x424711e0
 8001d4c:	42470068 	.word	0x42470068
 8001d50:	42470e40 	.word	0x42470e40

08001d54 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d54:	6802      	ldr	r2, [r0, #0]
{
 8001d56:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d58:	68d3      	ldr	r3, [r2, #12]
 8001d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d5e:	60d3      	str	r3, [r2, #12]
{
 8001d60:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d62:	f7ff f889 	bl	8000e78 <HAL_GetTick>
 8001d66:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	069b      	lsls	r3, r3, #26
 8001d6e:	d501      	bpl.n	8001d74 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001d70:	2000      	movs	r0, #0
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d74:	f7ff f880 	bl	8000e78 <HAL_GetTick>
 8001d78:	1b40      	subs	r0, r0, r5
 8001d7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d7e:	d9f3      	bls.n	8001d68 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001d80:	2003      	movs	r0, #3
}
 8001d82:	bd38      	pop	{r3, r4, r5, pc}

08001d84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d84:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d86:	6803      	ldr	r3, [r0, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	0652      	lsls	r2, r2, #25
{
 8001d8c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d8e:	d501      	bpl.n	8001d94 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001d90:	2000      	movs	r0, #0
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001d9a:	f7ff f86d 	bl	8000e78 <HAL_GetTick>
 8001d9e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	065b      	lsls	r3, r3, #25
 8001da6:	d4f3      	bmi.n	8001d90 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001da8:	f7ff f866 	bl	8000e78 <HAL_GetTick>
 8001dac:	1b40      	subs	r0, r0, r5
 8001dae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001db2:	d9f5      	bls.n	8001da0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001db4:	2003      	movs	r0, #3
}
 8001db6:	bd38      	pop	{r3, r4, r5, pc}

08001db8 <HAL_RTC_Init>:
{
 8001db8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001dba:	4604      	mov	r4, r0
 8001dbc:	b1b8      	cbz	r0, 8001dee <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001dbe:	7f43      	ldrb	r3, [r0, #29]
 8001dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dc4:	b913      	cbnz	r3, 8001dcc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001dc6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001dc8:	f000 fe28 	bl	8002a1c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001dcc:	2302      	movs	r3, #2
 8001dce:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	22ca      	movs	r2, #202	; 0xca
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8001dd6:	2253      	movs	r2, #83	; 0x53
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff ffd2 	bl	8001d84 <RTC_EnterInitMode>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	4605      	mov	r5, r0
 8001de4:	b128      	cbz	r0, 8001df2 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001de6:	22ff      	movs	r2, #255	; 0xff
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001dea:	2304      	movs	r3, #4
 8001dec:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001dee:	2501      	movs	r5, #1
 8001df0:	e02e      	b.n	8001e50 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001df2:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001df4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001df6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dfe:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e00:	6862      	ldr	r2, [r4, #4]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	4302      	orrs	r2, r0
 8001e06:	6960      	ldr	r0, [r4, #20]
 8001e08:	4302      	orrs	r2, r0
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e0e:	68e2      	ldr	r2, [r4, #12]
 8001e10:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	68a1      	ldr	r1, [r4, #8]
 8001e16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e22:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	069b      	lsls	r3, r3, #26
 8001e28:	d405      	bmi.n	8001e36 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff ff92 	bl	8001d54 <HAL_RTC_WaitForSynchro>
 8001e30:	b108      	cbz	r0, 8001e36 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	e7d7      	b.n	8001de6 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e36:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001e38:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e44:	430a      	orrs	r2, r1
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e48:	22ff      	movs	r2, #255	; 0xff
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	7763      	strb	r3, [r4, #29]
}
 8001e50:	4628      	mov	r0, r5
 8001e52:	bd38      	pop	{r3, r4, r5, pc}

08001e54 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001e54:	0903      	lsrs	r3, r0, #4
 8001e56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001e5a:	f000 000f 	and.w	r0, r0, #15
 8001e5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001e62:	b2c0      	uxtb	r0, r0
 8001e64:	4770      	bx	lr

08001e66 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001e66:	6803      	ldr	r3, [r0, #0]
 8001e68:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e6a:	6048      	str	r0, [r1, #4]
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001e6e:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001e70:	681d      	ldr	r5, [r3, #0]
 8001e72:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 8001e76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001e7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001e7e:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001e80:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001e82:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001e86:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001e8a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001e8e:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001e92:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001e94:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001e96:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001e98:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8001e9a:	b952      	cbnz	r2, 8001eb2 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001e9c:	f7ff ffda 	bl	8001e54 <RTC_Bcd2ToByte>
 8001ea0:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff ffd6 	bl	8001e54 <RTC_Bcd2ToByte>
 8001ea8:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f7ff ffd2 	bl	8001e54 <RTC_Bcd2ToByte>
 8001eb0:	7088      	strb	r0, [r1, #2]
}
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}

08001eb6 <HAL_RTC_GetDate>:
{
 8001eb6:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8001eb8:	6803      	ldr	r3, [r0, #0]
 8001eba:	685c      	ldr	r4, [r3, #4]
 8001ebc:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8001ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001ec4:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001ec6:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001eca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001ece:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001ed2:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001ed4:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001ed6:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001ed8:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8001eda:	b952      	cbnz	r2, 8001ef2 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001edc:	f7ff ffba 	bl	8001e54 <RTC_Bcd2ToByte>
 8001ee0:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f7ff ffb6 	bl	8001e54 <RTC_Bcd2ToByte>
 8001ee8:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff ffb2 	bl	8001e54 <RTC_Bcd2ToByte>
 8001ef0:	7088      	strb	r0, [r1, #2]
}
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	bd38      	pop	{r3, r4, r5, pc}

08001ef6 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001f0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f10:	2b01      	cmp	r3, #1
{
 8001f12:	b570      	push	{r4, r5, r6, lr}
 8001f14:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f18:	d01c      	beq.n	8001f54 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f1e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001f26:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f28:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f2c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f30:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001f32:	680a      	ldr	r2, [r1, #0]
 8001f34:	2a40      	cmp	r2, #64	; 0x40
 8001f36:	d079      	beq.n	800202c <HAL_TIM_ConfigClockSource+0x120>
 8001f38:	d819      	bhi.n	8001f6e <HAL_TIM_ConfigClockSource+0x62>
 8001f3a:	2a10      	cmp	r2, #16
 8001f3c:	f000 8093 	beq.w	8002066 <HAL_TIM_ConfigClockSource+0x15a>
 8001f40:	d80a      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x4c>
 8001f42:	2a00      	cmp	r2, #0
 8001f44:	f000 8089 	beq.w	800205a <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001f54:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f58:	2a20      	cmp	r2, #32
 8001f5a:	f000 808a 	beq.w	8002072 <HAL_TIM_ConfigClockSource+0x166>
 8001f5e:	2a30      	cmp	r2, #48	; 0x30
 8001f60:	d1f2      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f62:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f68:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f6c:	e036      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f6e:	2a70      	cmp	r2, #112	; 0x70
 8001f70:	d036      	beq.n	8001fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f72:	d81b      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0xa0>
 8001f74:	2a50      	cmp	r2, #80	; 0x50
 8001f76:	d042      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0xf2>
 8001f78:	2a60      	cmp	r2, #96	; 0x60
 8001f7a:	d1e5      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f7c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001f7e:	684d      	ldr	r5, [r1, #4]
 8001f80:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f82:	f024 0410 	bic.w	r4, r4, #16
 8001f86:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f88:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f8c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f94:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f98:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f9c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f9e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fa0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fa6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001faa:	e017      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001fac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001fb0:	d011      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0xca>
 8001fb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001fb6:	d1c7      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fb8:	688a      	ldr	r2, [r1, #8]
 8001fba:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fbc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fbe:	68c9      	ldr	r1, [r1, #12]
 8001fc0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fca:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fcc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd4:	e002      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	e7b3      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fe0:	688a      	ldr	r2, [r1, #8]
 8001fe2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fe4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fe6:	68c9      	ldr	r1, [r1, #12]
 8001fe8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fea:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001ff4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ff6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ff8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001ffc:	e7ee      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001ffe:	684c      	ldr	r4, [r1, #4]
 8002000:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002002:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002004:	6a1d      	ldr	r5, [r3, #32]
 8002006:	f025 0501 	bic.w	r5, r5, #1
 800200a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800200c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800200e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002012:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002016:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800201a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800201c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800201e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002020:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002022:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002026:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800202a:	e7d7      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800202c:	684c      	ldr	r4, [r1, #4]
 800202e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002030:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002032:	6a1d      	ldr	r5, [r3, #32]
 8002034:	f025 0501 	bic.w	r5, r5, #1
 8002038:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800203a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800203c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002040:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002044:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002048:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800204a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800204c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800204e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002050:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002054:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002058:	e7c0      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800205a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800205c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002060:	f042 0207 	orr.w	r2, r2, #7
 8002064:	e7ba      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002066:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002068:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800206c:	f042 0217 	orr.w	r2, r2, #23
 8002070:	e7b4      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002072:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002074:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002078:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800207c:	e7ae      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0xd0>

0800207e <HAL_TIM_PeriodElapsedCallback>:
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_OC_DelayElapsedCallback>:
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_IC_CaptureCallback>:
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_TriggerCallback>:
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002088:	6803      	ldr	r3, [r0, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	0791      	lsls	r1, r2, #30
{
 800208e:	b510      	push	{r4, lr}
 8002090:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002092:	d50e      	bpl.n	80020b2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	0792      	lsls	r2, r2, #30
 8002098:	d50b      	bpl.n	80020b2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800209a:	f06f 0202 	mvn.w	r2, #2
 800209e:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a8:	d077      	beq.n	800219a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	f7ff ffea 	bl	8002082 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	2300      	movs	r3, #0
 80020b0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	0750      	lsls	r0, r2, #29
 80020b8:	d510      	bpl.n	80020dc <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	0751      	lsls	r1, r2, #29
 80020be:	d50d      	bpl.n	80020dc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	f06f 0204 	mvn.w	r2, #4
 80020c4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ca:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ce:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020d0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d2:	d068      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80020d4:	f7ff ffd5 	bl	8002082 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d8:	2300      	movs	r3, #0
 80020da:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	0712      	lsls	r2, r2, #28
 80020e2:	d50f      	bpl.n	8002104 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	0710      	lsls	r0, r2, #28
 80020e8:	d50c      	bpl.n	8002104 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ea:	f06f 0208 	mvn.w	r2, #8
 80020ee:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020f8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020fa:	d05a      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020fc:	f7ff ffc1 	bl	8002082 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002100:	2300      	movs	r3, #0
 8002102:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	06d2      	lsls	r2, r2, #27
 800210a:	d510      	bpl.n	800212e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	06d0      	lsls	r0, r2, #27
 8002110:	d50d      	bpl.n	800212e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002112:	f06f 0210 	mvn.w	r2, #16
 8002116:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002118:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800211c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002120:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002124:	d04b      	beq.n	80021be <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	f7ff ffac 	bl	8002082 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	2300      	movs	r3, #0
 800212c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	07d1      	lsls	r1, r2, #31
 8002134:	d508      	bpl.n	8002148 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	07d2      	lsls	r2, r2, #31
 800213a:	d505      	bpl.n	8002148 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800213c:	f06f 0201 	mvn.w	r2, #1
 8002140:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002142:	4620      	mov	r0, r4
 8002144:	f7ff ff9b 	bl	800207e <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	0610      	lsls	r0, r2, #24
 800214e:	d508      	bpl.n	8002162 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	0611      	lsls	r1, r2, #24
 8002154:	d505      	bpl.n	8002162 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800215a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800215c:	4620      	mov	r0, r4
 800215e:	f000 f8d6 	bl	800230e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	0652      	lsls	r2, r2, #25
 8002168:	d508      	bpl.n	800217c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	0650      	lsls	r0, r2, #25
 800216e:	d505      	bpl.n	800217c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002174:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff ff85 	bl	8002086 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	0691      	lsls	r1, r2, #26
 8002182:	d522      	bpl.n	80021ca <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	0692      	lsls	r2, r2, #26
 8002188:	d51f      	bpl.n	80021ca <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800218e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002190:	611a      	str	r2, [r3, #16]
}
 8002192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002196:	f000 b8b9 	b.w	800230c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	f7ff ff71 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff ff70 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
 80021a4:	e783      	b.n	80020ae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	f7ff ff6b 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ff6a 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
 80021b0:	e792      	b.n	80020d8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	f7ff ff65 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff ff64 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
 80021bc:	e7a0      	b.n	8002100 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	f7ff ff5f 	bl	8002080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ff5e 	bl	8002084 <HAL_TIM_PWM_PulseFinishedCallback>
 80021c8:	e7af      	b.n	800212a <HAL_TIM_IRQHandler+0xa2>
 80021ca:	bd10      	pop	{r4, pc}

080021cc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80021ce:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021d0:	4290      	cmp	r0, r2
 80021d2:	d012      	beq.n	80021fa <TIM_Base_SetConfig+0x2e>
 80021d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0x2e>
 80021da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80021de:	4290      	cmp	r0, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0x2e>
 80021e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0x2e>
 80021ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ee:	4290      	cmp	r0, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0x2e>
 80021f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021f6:	4290      	cmp	r0, r2
 80021f8:	d11d      	bne.n	8002236 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80021fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002200:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002202:	4a21      	ldr	r2, [pc, #132]	; (8002288 <TIM_Base_SetConfig+0xbc>)
 8002204:	4290      	cmp	r0, r2
 8002206:	d104      	bne.n	8002212 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002208:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	4313      	orrs	r3, r2
 8002210:	e028      	b.n	8002264 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002212:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002216:	d0f7      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <TIM_Base_SetConfig+0xc0>)
 800221a:	4290      	cmp	r0, r2
 800221c:	d0f4      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 800221e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002222:	4290      	cmp	r0, r2
 8002224:	d0f0      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 8002226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222a:	4290      	cmp	r0, r2
 800222c:	d0ec      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 800222e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002232:	4290      	cmp	r0, r2
 8002234:	d0e8      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <TIM_Base_SetConfig+0xc4>)
 8002238:	4290      	cmp	r0, r2
 800223a:	d0e5      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 800223c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002240:	4290      	cmp	r0, r2
 8002242:	d0e1      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 8002244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002248:	4290      	cmp	r0, r2
 800224a:	d0dd      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 800224c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002250:	4290      	cmp	r0, r2
 8002252:	d0d9      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 8002254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002258:	4290      	cmp	r0, r2
 800225a:	d0d5      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
 800225c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002260:	4290      	cmp	r0, r2
 8002262:	d0d1      	beq.n	8002208 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002264:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002266:	688b      	ldr	r3, [r1, #8]
 8002268:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800226a:	680b      	ldr	r3, [r1, #0]
 800226c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <TIM_Base_SetConfig+0xbc>)
 8002270:	4298      	cmp	r0, r3
 8002272:	d006      	beq.n	8002282 <TIM_Base_SetConfig+0xb6>
 8002274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002278:	4298      	cmp	r0, r3
 800227a:	d002      	beq.n	8002282 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800227c:	2301      	movs	r3, #1
 800227e:	6143      	str	r3, [r0, #20]
}
 8002280:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002282:	690b      	ldr	r3, [r1, #16]
 8002284:	6303      	str	r3, [r0, #48]	; 0x30
 8002286:	e7f9      	b.n	800227c <TIM_Base_SetConfig+0xb0>
 8002288:	40010000 	.word	0x40010000
 800228c:	40000400 	.word	0x40000400
 8002290:	40014000 	.word	0x40014000

08002294 <HAL_TIM_Base_Init>:
{ 
 8002294:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002296:	4604      	mov	r4, r0
 8002298:	b1a0      	cbz	r0, 80022c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800229a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800229e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022a2:	b91b      	cbnz	r3, 80022ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80022a8:	f000 fc76 	bl	8002b98 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022b2:	6820      	ldr	r0, [r4, #0]
 80022b4:	1d21      	adds	r1, r4, #4
 80022b6:	f7ff ff89 	bl	80021cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022c0:	2000      	movs	r0, #0
 80022c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
}
 80022c6:	bd10      	pop	{r4, pc}

080022c8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80022c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022cc:	2b01      	cmp	r3, #1
{
 80022ce:	b510      	push	{r4, lr}
 80022d0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80022d4:	d018      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80022d6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022da:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80022dc:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022de:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022e0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022e6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4322      	orrs	r2, r4
 80022ec:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002302:	2300      	movs	r3, #0
 8002304:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002308:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800230a:	bd10      	pop	{r4, pc}

0800230c <HAL_TIMEx_CommutationCallback>:
 800230c:	4770      	bx	lr

0800230e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230e:	4770      	bx	lr

08002310 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002314:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002316:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002318:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800231a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800231c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002320:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002322:	6133      	str	r3, [r6, #16]
{
 8002324:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002326:	6883      	ldr	r3, [r0, #8]
 8002328:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800232a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800232c:	4303      	orrs	r3, r0
 800232e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002330:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002334:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002336:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233a:	430b      	orrs	r3, r1
 800233c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800233e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002340:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002342:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002348:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800234a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800234e:	6173      	str	r3, [r6, #20]
 8002350:	4b7a      	ldr	r3, [pc, #488]	; (800253c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002352:	d17c      	bne.n	800244e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002354:	429e      	cmp	r6, r3
 8002356:	d003      	beq.n	8002360 <UART_SetConfig+0x50>
 8002358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235c:	429e      	cmp	r6, r3
 800235e:	d144      	bne.n	80023ea <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002360:	f7ff fbd0 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002364:	2519      	movs	r5, #25
 8002366:	fb05 f300 	mul.w	r3, r5, r0
 800236a:	6860      	ldr	r0, [r4, #4]
 800236c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002370:	0040      	lsls	r0, r0, #1
 8002372:	fbb3 f3f0 	udiv	r3, r3, r0
 8002376:	fbb3 f3f9 	udiv	r3, r3, r9
 800237a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800237e:	f7ff fbc1 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	4368      	muls	r0, r5
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fbb0 f7f3 	udiv	r7, r0, r3
 800238c:	f7ff fbba 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002390:	6863      	ldr	r3, [r4, #4]
 8002392:	4368      	muls	r0, r5
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	fbb3 f3f9 	udiv	r3, r3, r9
 800239e:	fb09 7313 	mls	r3, r9, r3, r7
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	3332      	adds	r3, #50	; 0x32
 80023a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80023b0:	f7ff fba8 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 80023b4:	6862      	ldr	r2, [r4, #4]
 80023b6:	4368      	muls	r0, r5
 80023b8:	0052      	lsls	r2, r2, #1
 80023ba:	fbb0 faf2 	udiv	sl, r0, r2
 80023be:	f7ff fba1 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023c2:	6863      	ldr	r3, [r4, #4]
 80023c4:	4368      	muls	r0, r5
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80023d0:	fb09 a313 	mls	r3, r9, r3, sl
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	3332      	adds	r3, #50	; 0x32
 80023d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023e2:	443b      	add	r3, r7
 80023e4:	60b3      	str	r3, [r6, #8]
 80023e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023ea:	f7ff fb7b 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80023ee:	2519      	movs	r5, #25
 80023f0:	fb05 f300 	mul.w	r3, r5, r0
 80023f4:	6860      	ldr	r0, [r4, #4]
 80023f6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023fa:	0040      	lsls	r0, r0, #1
 80023fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002400:	fbb3 f3f9 	udiv	r3, r3, r9
 8002404:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002408:	f7ff fb6c 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800240c:	6863      	ldr	r3, [r4, #4]
 800240e:	4368      	muls	r0, r5
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fbb0 f7f3 	udiv	r7, r0, r3
 8002416:	f7ff fb65 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800241a:	6863      	ldr	r3, [r4, #4]
 800241c:	4368      	muls	r0, r5
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb0 f3f3 	udiv	r3, r0, r3
 8002424:	fbb3 f3f9 	udiv	r3, r3, r9
 8002428:	fb09 7313 	mls	r3, r9, r3, r7
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	3332      	adds	r3, #50	; 0x32
 8002430:	fbb3 f3f9 	udiv	r3, r3, r9
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800243a:	f7ff fb53 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	4368      	muls	r0, r5
 8002442:	0052      	lsls	r2, r2, #1
 8002444:	fbb0 faf2 	udiv	sl, r0, r2
 8002448:	f7ff fb4c 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800244c:	e7b9      	b.n	80023c2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800244e:	429e      	cmp	r6, r3
 8002450:	d002      	beq.n	8002458 <UART_SetConfig+0x148>
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <UART_SetConfig+0x230>)
 8002454:	429e      	cmp	r6, r3
 8002456:	d140      	bne.n	80024da <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002458:	f7ff fb54 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 800245c:	6867      	ldr	r7, [r4, #4]
 800245e:	2519      	movs	r5, #25
 8002460:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002464:	fb05 f300 	mul.w	r3, r5, r0
 8002468:	00bf      	lsls	r7, r7, #2
 800246a:	fbb3 f3f7 	udiv	r3, r3, r7
 800246e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002472:	011f      	lsls	r7, r3, #4
 8002474:	f7ff fb46 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002478:	6863      	ldr	r3, [r4, #4]
 800247a:	4368      	muls	r0, r5
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fbb0 f8f3 	udiv	r8, r0, r3
 8002482:	f7ff fb3f 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	4368      	muls	r0, r5
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002490:	fbb3 f3f9 	udiv	r3, r3, r9
 8002494:	fb09 8313 	mls	r3, r9, r3, r8
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	3332      	adds	r3, #50	; 0x32
 800249c:	fbb3 f3f9 	udiv	r3, r3, r9
 80024a0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80024a4:	f7ff fb2e 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 80024a8:	6862      	ldr	r2, [r4, #4]
 80024aa:	4368      	muls	r0, r5
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	fbb0 faf2 	udiv	sl, r0, r2
 80024b2:	f7ff fb27 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	4368      	muls	r0, r5
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80024c4:	fb09 a313 	mls	r3, r9, r3, sl
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	3332      	adds	r3, #50	; 0x32
 80024cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	ea43 0308 	orr.w	r3, r3, r8
 80024d8:	e783      	b.n	80023e2 <UART_SetConfig+0xd2>
 80024da:	f7ff fb03 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80024de:	6867      	ldr	r7, [r4, #4]
 80024e0:	2519      	movs	r5, #25
 80024e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024e6:	fb05 f300 	mul.w	r3, r5, r0
 80024ea:	00bf      	lsls	r7, r7, #2
 80024ec:	fbb3 f3f7 	udiv	r3, r3, r7
 80024f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80024f4:	011f      	lsls	r7, r3, #4
 80024f6:	f7ff faf5 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80024fa:	6863      	ldr	r3, [r4, #4]
 80024fc:	4368      	muls	r0, r5
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fbb0 f8f3 	udiv	r8, r0, r3
 8002504:	f7ff faee 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002508:	6863      	ldr	r3, [r4, #4]
 800250a:	4368      	muls	r0, r5
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	fbb3 f3f9 	udiv	r3, r3, r9
 8002516:	fb09 8313 	mls	r3, r9, r3, r8
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	3332      	adds	r3, #50	; 0x32
 800251e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002522:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002526:	f7ff fadd 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	4368      	muls	r0, r5
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	fbb0 faf2 	udiv	sl, r0, r2
 8002534:	f7ff fad6 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002538:	e7bd      	b.n	80024b6 <UART_SetConfig+0x1a6>
 800253a:	bf00      	nop
 800253c:	40011000 	.word	0x40011000
 8002540:	40011400 	.word	0x40011400

08002544 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	4604      	mov	r4, r0
 8002548:	460e      	mov	r6, r1
 800254a:	4617      	mov	r7, r2
 800254c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800254e:	6821      	ldr	r1, [r4, #0]
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	ea36 0303 	bics.w	r3, r6, r3
 8002556:	d101      	bne.n	800255c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002558:	2000      	movs	r0, #0
}
 800255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800255c:	1c6b      	adds	r3, r5, #1
 800255e:	d0f7      	beq.n	8002550 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002560:	b995      	cbnz	r5, 8002588 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800256a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002574:	2320      	movs	r3, #32
 8002576:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800257a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002584:	2003      	movs	r0, #3
 8002586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002588:	f7fe fc76 	bl	8000e78 <HAL_GetTick>
 800258c:	1bc0      	subs	r0, r0, r7
 800258e:	4285      	cmp	r5, r0
 8002590:	d2dd      	bcs.n	800254e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002592:	e7e6      	b.n	8002562 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002594 <HAL_UART_Init>:
{
 8002594:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002596:	4604      	mov	r4, r0
 8002598:	b340      	cbz	r0, 80025ec <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800259a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800259e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025a2:	b91b      	cbnz	r3, 80025ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80025a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80025a8:	f000 fb32 	bl	8002c10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80025ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025ae:	2324      	movs	r3, #36	; 0x24
 80025b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80025b4:	68d3      	ldr	r3, [r2, #12]
 80025b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff fea7 	bl	8002310 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025da:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80025de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80025e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80025e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80025ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
}
 80025ee:	bd10      	pop	{r4, pc}

080025f0 <HAL_UART_Transmit>:
{
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80025f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025fa:	2b20      	cmp	r3, #32
{
 80025fc:	4604      	mov	r4, r0
 80025fe:	460d      	mov	r5, r1
 8002600:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002602:	d14f      	bne.n	80026a4 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002604:	2900      	cmp	r1, #0
 8002606:	d04a      	beq.n	800269e <HAL_UART_Transmit+0xae>
 8002608:	2a00      	cmp	r2, #0
 800260a:	d048      	beq.n	800269e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800260c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002610:	2b01      	cmp	r3, #1
 8002612:	d047      	beq.n	80026a4 <HAL_UART_Transmit+0xb4>
 8002614:	2301      	movs	r3, #1
 8002616:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261a:	2300      	movs	r3, #0
 800261c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800261e:	2321      	movs	r3, #33	; 0x21
 8002620:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002624:	f7fe fc28 	bl	8000e78 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002628:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800262c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800262e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002632:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	b96b      	cbnz	r3, 8002654 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002638:	463b      	mov	r3, r7
 800263a:	4632      	mov	r2, r6
 800263c:	2140      	movs	r1, #64	; 0x40
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff ff80 	bl	8002544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002644:	b9b0      	cbnz	r0, 8002674 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002646:	2320      	movs	r3, #32
 8002648:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800264c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002654:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002656:	3b01      	subs	r3, #1
 8002658:	b29b      	uxth	r3, r3
 800265a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800265c:	68a3      	ldr	r3, [r4, #8]
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002662:	4632      	mov	r2, r6
 8002664:	463b      	mov	r3, r7
 8002666:	f04f 0180 	mov.w	r1, #128	; 0x80
 800266a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800266c:	d10e      	bne.n	800268c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266e:	f7ff ff69 	bl	8002544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002672:	b110      	cbz	r0, 800267a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002674:	2003      	movs	r0, #3
 8002676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800267a:	882b      	ldrh	r3, [r5, #0]
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002682:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	b943      	cbnz	r3, 800269a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002688:	3502      	adds	r5, #2
 800268a:	e7d2      	b.n	8002632 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268c:	f7ff ff5a 	bl	8002544 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002690:	2800      	cmp	r0, #0
 8002692:	d1ef      	bne.n	8002674 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	782a      	ldrb	r2, [r5, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	3501      	adds	r5, #1
 800269c:	e7c9      	b.n	8002632 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800269e:	2001      	movs	r0, #1
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80026a4:	2002      	movs	r0, #2
}
 80026a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080026ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80026ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80026ae:	4817      	ldr	r0, [pc, #92]	; (800270c <MX_ADC1_Init+0x60>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <MX_ADC1_Init+0x64>)
 80026b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b6:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026be:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80026c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026c4:	2300      	movs	r3, #0
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80026c6:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80026c8:	2201      	movs	r2, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026ca:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80026cc:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026ce:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026d0:	6203      	str	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026d2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026d4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026d6:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026d8:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026da:	f7fe fbd3 	bl	8000e84 <HAL_ADC_Init>
 80026de:	b118      	cbz	r0, 80026e8 <MX_ADC1_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026e0:	2146      	movs	r1, #70	; 0x46
 80026e2:	480c      	ldr	r0, [pc, #48]	; (8002714 <MX_ADC1_Init+0x68>)
 80026e4:	f000 f97a 	bl	80029dc <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026e8:	490b      	ldr	r1, [pc, #44]	; (8002718 <MX_ADC1_Init+0x6c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ea:	4808      	ldr	r0, [pc, #32]	; (800270c <MX_ADC1_Init+0x60>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026ec:	2201      	movs	r2, #1
 80026ee:	2300      	movs	r3, #0
 80026f0:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f4:	4669      	mov	r1, sp
 80026f6:	f7fe fd69 	bl	80011cc <HAL_ADC_ConfigChannel>
 80026fa:	b118      	cbz	r0, 8002704 <MX_ADC1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026fc:	2150      	movs	r1, #80	; 0x50
 80026fe:	4805      	ldr	r0, [pc, #20]	; (8002714 <MX_ADC1_Init+0x68>)
 8002700:	f000 f96c 	bl	80029dc <_Error_Handler>
  }

}
 8002704:	b005      	add	sp, #20
 8002706:	f85d fb04 	ldr.w	pc, [sp], #4
 800270a:	bf00      	nop
 800270c:	200000d0 	.word	0x200000d0
 8002710:	40012000 	.word	0x40012000
 8002714:	08003570 	.word	0x08003570
 8002718:	10000012 	.word	0x10000012

0800271c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800271c:	b507      	push	{r0, r1, r2, lr}

  if(adcHandle->Instance==ADC1)
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_ADC_MspInit+0x38>)
 8002720:	6802      	ldr	r2, [r0, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d113      	bne.n	800274e <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002726:	2200      	movs	r2, #0
 8002728:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800272c:	9201      	str	r2, [sp, #4]
 800272e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002730:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002734:	6459      	str	r1, [r3, #68]	; 0x44
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	9301      	str	r3, [sp, #4]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800273e:	2012      	movs	r0, #18
 8002740:	4611      	mov	r1, r2
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002742:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002744:	f7fe fdee 	bl	8001324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002748:	2012      	movs	r0, #18
 800274a:	f7fe fe1f 	bl	800138c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800274e:	b003      	add	sp, #12
 8002750:	f85d fb04 	ldr.w	pc, [sp], #4
 8002754:	40012000 	.word	0x40012000

08002758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002758:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_GPIO_Init+0x34>)
 800275c:	2100      	movs	r1, #0
 800275e:	9100      	str	r1, [sp, #0]
 8002760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
 8002768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	9101      	str	r1, [sp, #4]
 8002774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9b01      	ldr	r3, [sp, #4]

}
 8002786:	b002      	add	sp, #8
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b530      	push	{r4, r5, lr}
 8002792:	b0a1      	sub	sp, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <SystemClock_Config+0xc4>)
 8002796:	2100      	movs	r1, #0
 8002798:	9101      	str	r1, [sp, #4]
 800279a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <SystemClock_Config+0xc8>)
 80027ae:	9102      	str	r1, [sp, #8]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80027c2:	2309      	movs	r3, #9
 80027c4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ca:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027cc:	2301      	movs	r3, #1
 80027ce:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027d6:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027da:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027dc:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027de:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027e0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027e2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027e4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027e6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e8:	f7fe ff2c 	bl	8001644 <HAL_RCC_OscConfig>
 80027ec:	b100      	cbz	r0, 80027f0 <SystemClock_Config+0x60>
 80027ee:	e7fe      	b.n	80027ee <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027f0:	f7fe feec 	bl	80015cc <HAL_PWREx_EnableOverDrive>
 80027f4:	b100      	cbz	r0, 80027f8 <SystemClock_Config+0x68>
 80027f6:	e7fe      	b.n	80027f6 <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f8:	230f      	movs	r3, #15
 80027fa:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002800:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002802:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002804:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800280a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800280c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800280e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002810:	f7ff f8c8 	bl	80019a4 <HAL_RCC_ClockConfig>
 8002814:	b100      	cbz	r0, 8002818 <SystemClock_Config+0x88>
 8002816:	e7fe      	b.n	8002816 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002818:	2320      	movs	r3, #32
 800281a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800281c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800281e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002822:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002824:	f7ff f97e 	bl	8001b24 <HAL_RCCEx_PeriphCLKConfig>
 8002828:	4605      	mov	r5, r0
 800282a:	b100      	cbz	r0, 800282e <SystemClock_Config+0x9e>
 800282c:	e7fe      	b.n	800282c <SystemClock_Config+0x9c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800282e:	f7ff f953 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	fbb0 f0f3 	udiv	r0, r0, r3
 800283a:	f7fe fdb3 	bl	80013a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800283e:	4620      	mov	r0, r4
 8002840:	f7fe fdc6 	bl	80013d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002844:	462a      	mov	r2, r5
 8002846:	4629      	mov	r1, r5
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f7fe fd6a 	bl	8001324 <HAL_NVIC_SetPriority>
}
 8002850:	b021      	add	sp, #132	; 0x84
 8002852:	bd30      	pop	{r4, r5, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	00000000 	.word	0x00000000

08002860 <GetTemperature>:
		PrintValues(value, message);
		flag =0;
	}
}

void GetTemperature(float vin, ADC_HandleTypeDef* hadc) {
 8002860:	b508      	push	{r3, lr}
	tempReading = HAL_ADC_GetValue(hadc);
 8002862:	f7fe fc19 	bl	8001098 <HAL_ADC_GetValue>
	vin = ((float)tempReading/4095.0)*VREF;
 8002866:	ee07 0a90 	vmov	s15, r0
	tempReading = HAL_ADC_GetValue(hadc);
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <GetTemperature+0x78>)
	vin = ((float)tempReading/4095.0)*VREF;
 800286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	tempReading = HAL_ADC_GetValue(hadc);
 8002870:	6018      	str	r0, [r3, #0]
	vin = ((float)tempReading/4095.0)*VREF;
 8002872:	ee17 0a90 	vmov	r0, s15
 8002876:	f7fd fe77 	bl	8000568 <__aeabi_f2d>
 800287a:	a311      	add	r3, pc, #68	; (adr r3, 80028c0 <GetTemperature+0x60>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd fff0 	bl	8000864 <__aeabi_ddiv>
 8002884:	2200      	movs	r2, #0
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <GetTemperature+0x7c>)
 8002888:	f7fd fec2 	bl	8000610 <__aeabi_dmul>
 800288c:	f7fe f8d2 	bl	8000a34 <__aeabi_d2f>
	value = (((float)vin - V25)/SLOPE) + 25.0;
 8002890:	f7fd fe6a 	bl	8000568 <__aeabi_f2d>
 8002894:	a30c      	add	r3, pc, #48	; (adr r3, 80028c8 <GetTemperature+0x68>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fd05 	bl	80002a8 <__aeabi_dsub>
 800289e:	a30c      	add	r3, pc, #48	; (adr r3, 80028d0 <GetTemperature+0x70>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd ffde 	bl	8000864 <__aeabi_ddiv>
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <GetTemperature+0x80>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	f7fd fcfe 	bl	80002ac <__adddf3>
 80028b0:	f7fe f8c0 	bl	8000a34 <__aeabi_d2f>
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <GetTemperature+0x84>)
 80028b6:	6018      	str	r0, [r3, #0]
 80028b8:	bd08      	pop	{r3, pc}
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40affe00 	.word	0x40affe00
 80028c8:	851eb852 	.word	0x851eb852
 80028cc:	3fe851eb 	.word	0x3fe851eb
 80028d0:	47ae147b 	.word	0x47ae147b
 80028d4:	3f647ae1 	.word	0x3f647ae1
 80028d8:	200000b8 	.word	0x200000b8
 80028dc:	40080000 	.word	0x40080000
 80028e0:	40390000 	.word	0x40390000
 80028e4:	200000bc 	.word	0x200000bc

080028e8 <PrintValues>:
}

void PrintValues(float value, char message[40]) {
 80028e8:	b530      	push	{r4, r5, lr}
	sprintf(message, "T = %u C - %02d:%02d:%02d.%u - %02u %02u %02u \n\r", (int)value, time.Hours, time.Minutes, time.Seconds, decimal%2*5, date.Date, date.Month, date.Year);
 80028ea:	4a14      	ldr	r2, [pc, #80]	; (800293c <PrintValues+0x54>)
 80028ec:	4914      	ldr	r1, [pc, #80]	; (8002940 <PrintValues+0x58>)
 80028ee:	78d4      	ldrb	r4, [r2, #3]
 80028f0:	780b      	ldrb	r3, [r1, #0]
void PrintValues(float value, char message[40]) {
 80028f2:	b087      	sub	sp, #28
	sprintf(message, "T = %u C - %02d:%02d:%02d.%u - %02u %02u %02u \n\r", (int)value, time.Hours, time.Minutes, time.Seconds, decimal%2*5, date.Date, date.Month, date.Year);
 80028f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80028f8:	9405      	str	r4, [sp, #20]
 80028fa:	7854      	ldrb	r4, [r2, #1]
 80028fc:	9404      	str	r4, [sp, #16]
 80028fe:	7892      	ldrb	r2, [r2, #2]
 8002900:	9203      	str	r2, [sp, #12]
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <PrintValues+0x5c>)
 8002904:	8812      	ldrh	r2, [r2, #0]
 8002906:	f002 0201 	and.w	r2, r2, #1
 800290a:	0094      	lsls	r4, r2, #2
 800290c:	4422      	add	r2, r4
 800290e:	9202      	str	r2, [sp, #8]
 8002910:	788a      	ldrb	r2, [r1, #2]
 8002912:	9201      	str	r2, [sp, #4]
 8002914:	784a      	ldrb	r2, [r1, #1]
 8002916:	9200      	str	r2, [sp, #0]
void PrintValues(float value, char message[40]) {
 8002918:	4605      	mov	r5, r0
	sprintf(message, "T = %u C - %02d:%02d:%02d.%u - %02u %02u %02u \n\r", (int)value, time.Hours, time.Minutes, time.Seconds, decimal%2*5, date.Date, date.Month, date.Year);
 800291a:	ee17 2a90 	vmov	r2, s15
 800291e:	490a      	ldr	r1, [pc, #40]	; (8002948 <PrintValues+0x60>)
 8002920:	f000 f9ee 	bl	8002d00 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 8002924:	4628      	mov	r0, r5
 8002926:	f7fd fc63 	bl	80001f0 <strlen>
 800292a:	b282      	uxth	r2, r0
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <PrintValues+0x64>)
 800292e:	2364      	movs	r3, #100	; 0x64
 8002930:	4629      	mov	r1, r5
}
 8002932:	b007      	add	sp, #28
 8002934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 8002938:	f7ff be5a 	b.w	80025f0 <HAL_UART_Transmit>
 800293c:	20000130 	.word	0x20000130
 8002940:	2000011c 	.word	0x2000011c
 8002944:	2000008c 	.word	0x2000008c
 8002948:	0800357d 	.word	0x0800357d
 800294c:	20000190 	.word	0x20000190

08002950 <GetTimeAndDate>:
void GetTimeAndDate(void) {
 8002950:	b510      	push	{r4, lr}
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002952:	2200      	movs	r2, #0
 8002954:	490a      	ldr	r1, [pc, #40]	; (8002980 <GetTimeAndDate+0x30>)
 8002956:	480b      	ldr	r0, [pc, #44]	; (8002984 <GetTimeAndDate+0x34>)
	if (flag == 1) {
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <GetTimeAndDate+0x38>)
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800295a:	f7ff faac 	bl	8001eb6 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800295e:	2200      	movs	r2, #0
 8002960:	490a      	ldr	r1, [pc, #40]	; (800298c <GetTimeAndDate+0x3c>)
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <GetTimeAndDate+0x34>)
 8002964:	f7ff fa7f 	bl	8001e66 <HAL_RTC_GetTime>
	if (flag == 1) {
 8002968:	7823      	ldrb	r3, [r4, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <GetTimeAndDate+0x2e>
		PrintValues(value, message);
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <GetTimeAndDate+0x40>)
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <GetTimeAndDate+0x44>)
 8002972:	ed93 0a00 	vldr	s0, [r3]
 8002976:	f7ff ffb7 	bl	80028e8 <PrintValues>
		flag =0;
 800297a:	2300      	movs	r3, #0
 800297c:	7023      	strb	r3, [r4, #0]
 800297e:	bd10      	pop	{r4, pc}
 8002980:	20000130 	.word	0x20000130
 8002984:	20000134 	.word	0x20000134
 8002988:	2000008e 	.word	0x2000008e
 800298c:	2000011c 	.word	0x2000011c
 8002990:	200000bc 	.word	0x200000bc
 8002994:	2000008f 	.word	0x2000008f

08002998 <main>:
{
 8002998:	b508      	push	{r3, lr}
  HAL_Init();
 800299a:	f7fe fa47 	bl	8000e2c <HAL_Init>
  SystemClock_Config();
 800299e:	f7ff fef7 	bl	8002790 <SystemClock_Config>
  MX_GPIO_Init();
 80029a2:	f7ff fed9 	bl	8002758 <MX_GPIO_Init>
  MX_ADC1_Init();
 80029a6:	f7ff fe81 	bl	80026ac <MX_ADC1_Init>
  MX_TIM2_Init();
 80029aa:	f000 f8bf 	bl	8002b2c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80029ae:	f000 f90f 	bl	8002bd0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80029b2:	f000 f815 	bl	80029e0 <MX_RTC_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80029b6:	4804      	ldr	r0, [pc, #16]	; (80029c8 <main+0x30>)
 80029b8:	f7ff fa9d 	bl	8001ef6 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <main+0x34>)
 80029be:	f7fe fb05 	bl	8000fcc <HAL_ADC_Start_IT>
	  GetTimeAndDate();
 80029c2:	f7ff ffc5 	bl	8002950 <GetTimeAndDate>
 80029c6:	e7fc      	b.n	80029c2 <main+0x2a>
 80029c8:	20000154 	.word	0x20000154
 80029cc:	200000d0 	.word	0x200000d0

080029d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	float vin = 0;
	GetTemperature(vin, hadc);
 80029d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80029d8 <HAL_ADC_ConvCpltCallback+0x8>
 80029d4:	f7ff bf44 	b.w	8002860 <GetTemperature>
 80029d8:	00000000 	.word	0x00000000

080029dc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80029dc:	e7fe      	b.n	80029dc <_Error_Handler>
	...

080029e0 <MX_RTC_Init>:
void MX_RTC_Init(void)
{

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 80029e0:	480b      	ldr	r0, [pc, #44]	; (8002a10 <MX_RTC_Init+0x30>)
{
 80029e2:	b508      	push	{r3, lr}
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 80029e4:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_RTC_Init+0x34>)
 80029e8:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 80029ea:	6082      	str	r2, [r0, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029ec:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 80029ee:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029f0:	6043      	str	r3, [r0, #4]
  hrtc.Init.SynchPrediv = 255;
 80029f2:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029f4:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029f6:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029f8:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029fa:	f7ff f9dd 	bl	8001db8 <HAL_RTC_Init>
 80029fe:	b128      	cbz	r0, 8002a0c <MX_RTC_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a00:	2140      	movs	r1, #64	; 0x40
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_RTC_Init+0x38>)
  }

}
 8002a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002a08:	f7ff bfe8 	b.w	80029dc <_Error_Handler>
 8002a0c:	bd08      	pop	{r3, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000134 	.word	0x20000134
 8002a14:	40002800 	.word	0x40002800
 8002a18:	080035ae 	.word	0x080035ae

08002a1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8002a1c:	6802      	ldr	r2, [r0, #0]
 8002a1e:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RTC_MspInit+0x10>)
 8002a20:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a22:	bf02      	ittt	eq
 8002a24:	4b02      	ldreq	r3, [pc, #8]	; (8002a30 <HAL_RTC_MspInit+0x14>)
 8002a26:	2201      	moveq	r2, #1
 8002a28:	601a      	streq	r2, [r3, #0]
 8002a2a:	4770      	bx	lr
 8002a2c:	40002800 	.word	0x40002800
 8002a30:	42470e3c 	.word	0x42470e3c

08002a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a36:	2003      	movs	r0, #3
 8002a38:	f7fe fc62 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4611      	mov	r1, r2
 8002a40:	f06f 000b 	mvn.w	r0, #11
 8002a44:	f7fe fc6e 	bl	8001324 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	f06f 000a 	mvn.w	r0, #10
 8002a50:	f7fe fc68 	bl	8001324 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	4611      	mov	r1, r2
 8002a58:	f06f 0009 	mvn.w	r0, #9
 8002a5c:	f7fe fc62 	bl	8001324 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002a60:	2200      	movs	r2, #0
 8002a62:	4611      	mov	r1, r2
 8002a64:	f06f 0004 	mvn.w	r0, #4
 8002a68:	f7fe fc5c 	bl	8001324 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4611      	mov	r1, r2
 8002a70:	f06f 0003 	mvn.w	r0, #3
 8002a74:	f7fe fc56 	bl	8001324 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	f06f 0001 	mvn.w	r0, #1
 8002a80:	f7fe fc50 	bl	8001324 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	4611      	mov	r1, r2
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a90:	f7fe bc48 	b.w	8001324 <HAL_NVIC_SetPriority>

08002a94 <NMI_Handler>:
 8002a94:	4770      	bx	lr

08002a96 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002a96:	e7fe      	b.n	8002a96 <HardFault_Handler>

08002a98 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002a98:	e7fe      	b.n	8002a98 <MemManage_Handler>

08002a9a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002a9a:	e7fe      	b.n	8002a9a <BusFault_Handler>

08002a9c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002a9c:	e7fe      	b.n	8002a9c <UsageFault_Handler>

08002a9e <SVC_Handler>:
 8002a9e:	4770      	bx	lr

08002aa0 <DebugMon_Handler>:
 8002aa0:	4770      	bx	lr

08002aa2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002aa2:	4770      	bx	lr

08002aa4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002aa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa6:	f7fe f9db 	bl	8000e60 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002aae:	f7fe bc9c 	b.w	80013ea <HAL_SYSTICK_IRQHandler>
	...

08002ab4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ab4:	4801      	ldr	r0, [pc, #4]	; (8002abc <ADC_IRQHandler+0x8>)
 8002ab6:	f7fe baf4 	b.w	80010a2 <HAL_ADC_IRQHandler>
 8002aba:	bf00      	nop
 8002abc:	200000d0 	.word	0x200000d0

08002ac0 <TIM2_IRQHandler>:
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	flag =1;
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <TIM2_IRQHandler+0x14>)
	decimal += 1;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <TIM2_IRQHandler+0x18>)
	flag =1;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
	decimal += 1;
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <TIM2_IRQHandler+0x1c>)
 8002aca:	8813      	ldrh	r3, [r2, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	8013      	strh	r3, [r2, #0]
  HAL_TIM_IRQHandler(&htim2);
 8002ad0:	f7ff bada 	b.w	8002088 <HAL_TIM_IRQHandler>
 8002ad4:	2000008e 	.word	0x2000008e
 8002ad8:	20000154 	.word	0x20000154
 8002adc:	2000008c 	.word	0x2000008c

08002ae0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae0:	490f      	ldr	r1, [pc, #60]	; (8002b20 <SystemInit+0x40>)
 8002ae2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ae6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <SystemInit+0x44>)
 8002af0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002af2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002afa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002b02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b06:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <SystemInit+0x48>)
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b14:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00
 8002b24:	40023800 	.word	0x40023800
 8002b28:	24003010 	.word	0x24003010

08002b2c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8002b2e:	4818      	ldr	r0, [pc, #96]	; (8002b90 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 9000;
 8002b30:	f242 3328 	movw	r3, #9000	; 0x2328
 8002b34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b38:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4999;
 8002b3c:	f241 3287 	movw	r2, #4999	; 0x1387
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	2300      	movs	r3, #0
 8002b42:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4999;
 8002b44:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b46:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b48:	f7ff fba4 	bl	8002294 <HAL_TIM_Base_Init>
 8002b4c:	b118      	cbz	r0, 8002b56 <MX_TIM2_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b4e:	213e      	movs	r1, #62	; 0x3e
 8002b50:	4810      	ldr	r0, [pc, #64]	; (8002b94 <MX_TIM2_Init+0x68>)
 8002b52:	f7ff ff43 	bl	80029dc <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b56:	a906      	add	r1, sp, #24
 8002b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b60:	480b      	ldr	r0, [pc, #44]	; (8002b90 <MX_TIM2_Init+0x64>)
 8002b62:	f7ff f9d3 	bl	8001f0c <HAL_TIM_ConfigClockSource>
 8002b66:	b118      	cbz	r0, 8002b70 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b68:	2144      	movs	r1, #68	; 0x44
 8002b6a:	480a      	ldr	r0, [pc, #40]	; (8002b94 <MX_TIM2_Init+0x68>)
 8002b6c:	f7ff ff36 	bl	80029dc <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b70:	2220      	movs	r2, #32
 8002b72:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b74:	4669      	mov	r1, sp
 8002b76:	4806      	ldr	r0, [pc, #24]	; (8002b90 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b78:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7c:	f7ff fba4 	bl	80022c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b80:	b118      	cbz	r0, 8002b8a <MX_TIM2_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b82:	214b      	movs	r1, #75	; 0x4b
 8002b84:	4803      	ldr	r0, [pc, #12]	; (8002b94 <MX_TIM2_Init+0x68>)
 8002b86:	f7ff ff29 	bl	80029dc <_Error_Handler>
  }

}
 8002b8a:	b007      	add	sp, #28
 8002b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b90:	20000154 	.word	0x20000154
 8002b94:	080035d3 	.word	0x080035d3

08002b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002b98:	6803      	ldr	r3, [r0, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002b9e:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8002ba0:	d113      	bne.n	8002bca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002ba8:	9201      	str	r2, [sp, #4]
 8002baa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bac:	f041 0101 	orr.w	r1, r1, #1
 8002bb0:	6419      	str	r1, [r3, #64]	; 0x40
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	9301      	str	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bba:	201c      	movs	r0, #28
 8002bbc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bbe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bc0:	f7fe fbb0 	bl	8001324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bc4:	201c      	movs	r0, #28
 8002bc6:	f7fe fbe1 	bl	800138c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bca:	b003      	add	sp, #12
 8002bcc:	f85d fb04 	ldr.w	pc, [sp], #4

08002bd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bd0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002bd2:	480c      	ldr	r0, [pc, #48]	; (8002c04 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_USART1_UART_Init+0x38>)
 8002bd6:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8002bda:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bde:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002be0:	2300      	movs	r3, #0
 8002be2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002be4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002be6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002be8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bee:	f7ff fcd1 	bl	8002594 <HAL_UART_Init>
 8002bf2:	b128      	cbz	r0, 8002c00 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bf4:	2142      	movs	r1, #66	; 0x42
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USART1_UART_Init+0x3c>)
  }

}
 8002bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002bfc:	f7ff beee 	b.w	80029dc <_Error_Handler>
 8002c00:	bd08      	pop	{r3, pc}
 8002c02:	bf00      	nop
 8002c04:	20000190 	.word	0x20000190
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	080035e0 	.word	0x080035e0

08002c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002c12:	6802      	ldr	r2, [r0, #0]
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_UART_MspInit+0x48>)
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d11a      	bne.n	8002c50 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	480f      	ldr	r0, [pc, #60]	; (8002c60 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c24:	f042 0210 	orr.w	r2, r2, #16
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c48:	2307      	movs	r3, #7
 8002c4a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f7fe fbd2 	bl	80013f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c50:	b007      	add	sp, #28
 8002c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c56:	bf00      	nop
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c9c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c6a:	e003      	b.n	8002c74 <LoopCopyDataInit>

08002c6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c72:	3104      	adds	r1, #4

08002c74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c74:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c7c:	d3f6      	bcc.n	8002c6c <CopyDataInit>
  ldr  r2, =_sbss
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c80:	e002      	b.n	8002c88 <LoopFillZerobss>

08002c82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c84:	f842 3b04 	str.w	r3, [r2], #4

08002c88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c8c:	d3f9      	bcc.n	8002c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c8e:	f7ff ff27 	bl	8002ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f000 f811 	bl	8002cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c96:	f7ff fe7f 	bl	8002998 <main>
  bx  lr    
 8002c9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c9c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002ca0:	08003634 	.word	0x08003634
  ldr  r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ca8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002cac:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002cb0:	200001d4 	.word	0x200001d4

08002cb4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <CAN1_RX0_IRQHandler>
	...

08002cb8 <__libc_init_array>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4e0d      	ldr	r6, [pc, #52]	; (8002cf0 <__libc_init_array+0x38>)
 8002cbc:	4c0d      	ldr	r4, [pc, #52]	; (8002cf4 <__libc_init_array+0x3c>)
 8002cbe:	1ba4      	subs	r4, r4, r6
 8002cc0:	10a4      	asrs	r4, r4, #2
 8002cc2:	2500      	movs	r5, #0
 8002cc4:	42a5      	cmp	r5, r4
 8002cc6:	d109      	bne.n	8002cdc <__libc_init_array+0x24>
 8002cc8:	4e0b      	ldr	r6, [pc, #44]	; (8002cf8 <__libc_init_array+0x40>)
 8002cca:	4c0c      	ldr	r4, [pc, #48]	; (8002cfc <__libc_init_array+0x44>)
 8002ccc:	f000 fc44 	bl	8003558 <_init>
 8002cd0:	1ba4      	subs	r4, r4, r6
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	42a5      	cmp	r5, r4
 8002cd8:	d105      	bne.n	8002ce6 <__libc_init_array+0x2e>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce0:	4798      	blx	r3
 8002ce2:	3501      	adds	r5, #1
 8002ce4:	e7ee      	b.n	8002cc4 <__libc_init_array+0xc>
 8002ce6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cea:	4798      	blx	r3
 8002cec:	3501      	adds	r5, #1
 8002cee:	e7f2      	b.n	8002cd6 <__libc_init_array+0x1e>
 8002cf0:	0800362c 	.word	0x0800362c
 8002cf4:	0800362c 	.word	0x0800362c
 8002cf8:	0800362c 	.word	0x0800362c
 8002cfc:	08003630 	.word	0x08003630

08002d00 <siprintf>:
 8002d00:	b40e      	push	{r1, r2, r3}
 8002d02:	b500      	push	{lr}
 8002d04:	b09c      	sub	sp, #112	; 0x70
 8002d06:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8002d0c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002d10:	9002      	str	r0, [sp, #8]
 8002d12:	9006      	str	r0, [sp, #24]
 8002d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d18:	480a      	ldr	r0, [pc, #40]	; (8002d44 <siprintf+0x44>)
 8002d1a:	9104      	str	r1, [sp, #16]
 8002d1c:	9107      	str	r1, [sp, #28]
 8002d1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d26:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002d2a:	6800      	ldr	r0, [r0, #0]
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	a902      	add	r1, sp, #8
 8002d30:	f000 f866 	bl	8002e00 <_svfiprintf_r>
 8002d34:	9b02      	ldr	r3, [sp, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	b01c      	add	sp, #112	; 0x70
 8002d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d40:	b003      	add	sp, #12
 8002d42:	4770      	bx	lr
 8002d44:	2000000c 	.word	0x2000000c

08002d48 <__ssputs_r>:
 8002d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d4c:	688e      	ldr	r6, [r1, #8]
 8002d4e:	429e      	cmp	r6, r3
 8002d50:	4682      	mov	sl, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4691      	mov	r9, r2
 8002d56:	4698      	mov	r8, r3
 8002d58:	d835      	bhi.n	8002dc6 <__ssputs_r+0x7e>
 8002d5a:	898a      	ldrh	r2, [r1, #12]
 8002d5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d60:	d031      	beq.n	8002dc6 <__ssputs_r+0x7e>
 8002d62:	6825      	ldr	r5, [r4, #0]
 8002d64:	6909      	ldr	r1, [r1, #16]
 8002d66:	1a6f      	subs	r7, r5, r1
 8002d68:	6965      	ldr	r5, [r4, #20]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d70:	fb95 f5f3 	sdiv	r5, r5, r3
 8002d74:	f108 0301 	add.w	r3, r8, #1
 8002d78:	443b      	add	r3, r7
 8002d7a:	429d      	cmp	r5, r3
 8002d7c:	bf38      	it	cc
 8002d7e:	461d      	movcc	r5, r3
 8002d80:	0553      	lsls	r3, r2, #21
 8002d82:	d531      	bpl.n	8002de8 <__ssputs_r+0xa0>
 8002d84:	4629      	mov	r1, r5
 8002d86:	f000 fb39 	bl	80033fc <_malloc_r>
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	b950      	cbnz	r0, 8002da4 <__ssputs_r+0x5c>
 8002d8e:	230c      	movs	r3, #12
 8002d90:	f8ca 3000 	str.w	r3, [sl]
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9a:	81a3      	strh	r3, [r4, #12]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da4:	463a      	mov	r2, r7
 8002da6:	6921      	ldr	r1, [r4, #16]
 8002da8:	f000 fab4 	bl	8003314 <memcpy>
 8002dac:	89a3      	ldrh	r3, [r4, #12]
 8002dae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	81a3      	strh	r3, [r4, #12]
 8002db8:	6126      	str	r6, [r4, #16]
 8002dba:	6165      	str	r5, [r4, #20]
 8002dbc:	443e      	add	r6, r7
 8002dbe:	1bed      	subs	r5, r5, r7
 8002dc0:	6026      	str	r6, [r4, #0]
 8002dc2:	60a5      	str	r5, [r4, #8]
 8002dc4:	4646      	mov	r6, r8
 8002dc6:	4546      	cmp	r6, r8
 8002dc8:	bf28      	it	cs
 8002dca:	4646      	movcs	r6, r8
 8002dcc:	4632      	mov	r2, r6
 8002dce:	4649      	mov	r1, r9
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	f000 faaa 	bl	800332a <memmove>
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	1b9b      	subs	r3, r3, r6
 8002dda:	60a3      	str	r3, [r4, #8]
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	441e      	add	r6, r3
 8002de0:	6026      	str	r6, [r4, #0]
 8002de2:	2000      	movs	r0, #0
 8002de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de8:	462a      	mov	r2, r5
 8002dea:	f000 fb65 	bl	80034b8 <_realloc_r>
 8002dee:	4606      	mov	r6, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1e1      	bne.n	8002db8 <__ssputs_r+0x70>
 8002df4:	6921      	ldr	r1, [r4, #16]
 8002df6:	4650      	mov	r0, sl
 8002df8:	f000 fab2 	bl	8003360 <_free_r>
 8002dfc:	e7c7      	b.n	8002d8e <__ssputs_r+0x46>
	...

08002e00 <_svfiprintf_r>:
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	b09d      	sub	sp, #116	; 0x74
 8002e06:	4680      	mov	r8, r0
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	898b      	ldrh	r3, [r1, #12]
 8002e0c:	061c      	lsls	r4, r3, #24
 8002e0e:	460d      	mov	r5, r1
 8002e10:	4616      	mov	r6, r2
 8002e12:	d50f      	bpl.n	8002e34 <_svfiprintf_r+0x34>
 8002e14:	690b      	ldr	r3, [r1, #16]
 8002e16:	b96b      	cbnz	r3, 8002e34 <_svfiprintf_r+0x34>
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	f000 faef 	bl	80033fc <_malloc_r>
 8002e1e:	6028      	str	r0, [r5, #0]
 8002e20:	6128      	str	r0, [r5, #16]
 8002e22:	b928      	cbnz	r0, 8002e30 <_svfiprintf_r+0x30>
 8002e24:	230c      	movs	r3, #12
 8002e26:	f8c8 3000 	str.w	r3, [r8]
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	e0c5      	b.n	8002fbc <_svfiprintf_r+0x1bc>
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	616b      	str	r3, [r5, #20]
 8002e34:	2300      	movs	r3, #0
 8002e36:	9309      	str	r3, [sp, #36]	; 0x24
 8002e38:	2320      	movs	r3, #32
 8002e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e3e:	2330      	movs	r3, #48	; 0x30
 8002e40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e44:	f04f 0b01 	mov.w	fp, #1
 8002e48:	4637      	mov	r7, r6
 8002e4a:	463c      	mov	r4, r7
 8002e4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d13c      	bne.n	8002ece <_svfiprintf_r+0xce>
 8002e54:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e58:	d00b      	beq.n	8002e72 <_svfiprintf_r+0x72>
 8002e5a:	4653      	mov	r3, sl
 8002e5c:	4632      	mov	r2, r6
 8002e5e:	4629      	mov	r1, r5
 8002e60:	4640      	mov	r0, r8
 8002e62:	f7ff ff71 	bl	8002d48 <__ssputs_r>
 8002e66:	3001      	adds	r0, #1
 8002e68:	f000 80a3 	beq.w	8002fb2 <_svfiprintf_r+0x1b2>
 8002e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e6e:	4453      	add	r3, sl
 8002e70:	9309      	str	r3, [sp, #36]	; 0x24
 8002e72:	783b      	ldrb	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 809c 	beq.w	8002fb2 <_svfiprintf_r+0x1b2>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	9304      	str	r3, [sp, #16]
 8002e82:	9307      	str	r3, [sp, #28]
 8002e84:	9205      	str	r2, [sp, #20]
 8002e86:	9306      	str	r3, [sp, #24]
 8002e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8002e8e:	2205      	movs	r2, #5
 8002e90:	7821      	ldrb	r1, [r4, #0]
 8002e92:	4850      	ldr	r0, [pc, #320]	; (8002fd4 <_svfiprintf_r+0x1d4>)
 8002e94:	f7fd f9b4 	bl	8000200 <memchr>
 8002e98:	1c67      	adds	r7, r4, #1
 8002e9a:	9b04      	ldr	r3, [sp, #16]
 8002e9c:	b9d8      	cbnz	r0, 8002ed6 <_svfiprintf_r+0xd6>
 8002e9e:	06d9      	lsls	r1, r3, #27
 8002ea0:	bf44      	itt	mi
 8002ea2:	2220      	movmi	r2, #32
 8002ea4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ea8:	071a      	lsls	r2, r3, #28
 8002eaa:	bf44      	itt	mi
 8002eac:	222b      	movmi	r2, #43	; 0x2b
 8002eae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002eb2:	7822      	ldrb	r2, [r4, #0]
 8002eb4:	2a2a      	cmp	r2, #42	; 0x2a
 8002eb6:	d016      	beq.n	8002ee6 <_svfiprintf_r+0xe6>
 8002eb8:	9a07      	ldr	r2, [sp, #28]
 8002eba:	2100      	movs	r1, #0
 8002ebc:	200a      	movs	r0, #10
 8002ebe:	4627      	mov	r7, r4
 8002ec0:	3401      	adds	r4, #1
 8002ec2:	783b      	ldrb	r3, [r7, #0]
 8002ec4:	3b30      	subs	r3, #48	; 0x30
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	d951      	bls.n	8002f6e <_svfiprintf_r+0x16e>
 8002eca:	b1c9      	cbz	r1, 8002f00 <_svfiprintf_r+0x100>
 8002ecc:	e011      	b.n	8002ef2 <_svfiprintf_r+0xf2>
 8002ece:	2b25      	cmp	r3, #37	; 0x25
 8002ed0:	d0c0      	beq.n	8002e54 <_svfiprintf_r+0x54>
 8002ed2:	4627      	mov	r7, r4
 8002ed4:	e7b9      	b.n	8002e4a <_svfiprintf_r+0x4a>
 8002ed6:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <_svfiprintf_r+0x1d4>)
 8002ed8:	1a80      	subs	r0, r0, r2
 8002eda:	fa0b f000 	lsl.w	r0, fp, r0
 8002ede:	4318      	orrs	r0, r3
 8002ee0:	9004      	str	r0, [sp, #16]
 8002ee2:	463c      	mov	r4, r7
 8002ee4:	e7d3      	b.n	8002e8e <_svfiprintf_r+0x8e>
 8002ee6:	9a03      	ldr	r2, [sp, #12]
 8002ee8:	1d11      	adds	r1, r2, #4
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	9103      	str	r1, [sp, #12]
 8002eee:	2a00      	cmp	r2, #0
 8002ef0:	db01      	blt.n	8002ef6 <_svfiprintf_r+0xf6>
 8002ef2:	9207      	str	r2, [sp, #28]
 8002ef4:	e004      	b.n	8002f00 <_svfiprintf_r+0x100>
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	9207      	str	r2, [sp, #28]
 8002efe:	9304      	str	r3, [sp, #16]
 8002f00:	783b      	ldrb	r3, [r7, #0]
 8002f02:	2b2e      	cmp	r3, #46	; 0x2e
 8002f04:	d10e      	bne.n	8002f24 <_svfiprintf_r+0x124>
 8002f06:	787b      	ldrb	r3, [r7, #1]
 8002f08:	2b2a      	cmp	r3, #42	; 0x2a
 8002f0a:	f107 0101 	add.w	r1, r7, #1
 8002f0e:	d132      	bne.n	8002f76 <_svfiprintf_r+0x176>
 8002f10:	9b03      	ldr	r3, [sp, #12]
 8002f12:	1d1a      	adds	r2, r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	9203      	str	r2, [sp, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bfb8      	it	lt
 8002f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f20:	3702      	adds	r7, #2
 8002f22:	9305      	str	r3, [sp, #20]
 8002f24:	4c2c      	ldr	r4, [pc, #176]	; (8002fd8 <_svfiprintf_r+0x1d8>)
 8002f26:	7839      	ldrb	r1, [r7, #0]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7fd f968 	bl	8000200 <memchr>
 8002f30:	b138      	cbz	r0, 8002f42 <_svfiprintf_r+0x142>
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	1b00      	subs	r0, r0, r4
 8002f36:	fa03 f000 	lsl.w	r0, r3, r0
 8002f3a:	9b04      	ldr	r3, [sp, #16]
 8002f3c:	4303      	orrs	r3, r0
 8002f3e:	9304      	str	r3, [sp, #16]
 8002f40:	3701      	adds	r7, #1
 8002f42:	7839      	ldrb	r1, [r7, #0]
 8002f44:	4825      	ldr	r0, [pc, #148]	; (8002fdc <_svfiprintf_r+0x1dc>)
 8002f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f4a:	2206      	movs	r2, #6
 8002f4c:	1c7e      	adds	r6, r7, #1
 8002f4e:	f7fd f957 	bl	8000200 <memchr>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d035      	beq.n	8002fc2 <_svfiprintf_r+0x1c2>
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <_svfiprintf_r+0x1e0>)
 8002f58:	b9fb      	cbnz	r3, 8002f9a <_svfiprintf_r+0x19a>
 8002f5a:	9b03      	ldr	r3, [sp, #12]
 8002f5c:	3307      	adds	r3, #7
 8002f5e:	f023 0307 	bic.w	r3, r3, #7
 8002f62:	3308      	adds	r3, #8
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f68:	444b      	add	r3, r9
 8002f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f6c:	e76c      	b.n	8002e48 <_svfiprintf_r+0x48>
 8002f6e:	fb00 3202 	mla	r2, r0, r2, r3
 8002f72:	2101      	movs	r1, #1
 8002f74:	e7a3      	b.n	8002ebe <_svfiprintf_r+0xbe>
 8002f76:	2300      	movs	r3, #0
 8002f78:	9305      	str	r3, [sp, #20]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	240a      	movs	r4, #10
 8002f7e:	460f      	mov	r7, r1
 8002f80:	3101      	adds	r1, #1
 8002f82:	783a      	ldrb	r2, [r7, #0]
 8002f84:	3a30      	subs	r2, #48	; 0x30
 8002f86:	2a09      	cmp	r2, #9
 8002f88:	d903      	bls.n	8002f92 <_svfiprintf_r+0x192>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ca      	beq.n	8002f24 <_svfiprintf_r+0x124>
 8002f8e:	9005      	str	r0, [sp, #20]
 8002f90:	e7c8      	b.n	8002f24 <_svfiprintf_r+0x124>
 8002f92:	fb04 2000 	mla	r0, r4, r0, r2
 8002f96:	2301      	movs	r3, #1
 8002f98:	e7f1      	b.n	8002f7e <_svfiprintf_r+0x17e>
 8002f9a:	ab03      	add	r3, sp, #12
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	462a      	mov	r2, r5
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_svfiprintf_r+0x1e4>)
 8002fa2:	a904      	add	r1, sp, #16
 8002fa4:	4640      	mov	r0, r8
 8002fa6:	f3af 8000 	nop.w
 8002faa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fae:	4681      	mov	r9, r0
 8002fb0:	d1d9      	bne.n	8002f66 <_svfiprintf_r+0x166>
 8002fb2:	89ab      	ldrh	r3, [r5, #12]
 8002fb4:	065b      	lsls	r3, r3, #25
 8002fb6:	f53f af38 	bmi.w	8002e2a <_svfiprintf_r+0x2a>
 8002fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fbc:	b01d      	add	sp, #116	; 0x74
 8002fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc2:	ab03      	add	r3, sp, #12
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462a      	mov	r2, r5
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <_svfiprintf_r+0x1e4>)
 8002fca:	a904      	add	r1, sp, #16
 8002fcc:	4640      	mov	r0, r8
 8002fce:	f000 f881 	bl	80030d4 <_printf_i>
 8002fd2:	e7ea      	b.n	8002faa <_svfiprintf_r+0x1aa>
 8002fd4:	080035ef 	.word	0x080035ef
 8002fd8:	080035f5 	.word	0x080035f5
 8002fdc:	080035f9 	.word	0x080035f9
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	08002d49 	.word	0x08002d49

08002fe8 <_printf_common>:
 8002fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fec:	4691      	mov	r9, r2
 8002fee:	461f      	mov	r7, r3
 8002ff0:	688a      	ldr	r2, [r1, #8]
 8002ff2:	690b      	ldr	r3, [r1, #16]
 8002ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfb8      	it	lt
 8002ffc:	4613      	movlt	r3, r2
 8002ffe:	f8c9 3000 	str.w	r3, [r9]
 8003002:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003006:	4606      	mov	r6, r0
 8003008:	460c      	mov	r4, r1
 800300a:	b112      	cbz	r2, 8003012 <_printf_common+0x2a>
 800300c:	3301      	adds	r3, #1
 800300e:	f8c9 3000 	str.w	r3, [r9]
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	0699      	lsls	r1, r3, #26
 8003016:	bf42      	ittt	mi
 8003018:	f8d9 3000 	ldrmi.w	r3, [r9]
 800301c:	3302      	addmi	r3, #2
 800301e:	f8c9 3000 	strmi.w	r3, [r9]
 8003022:	6825      	ldr	r5, [r4, #0]
 8003024:	f015 0506 	ands.w	r5, r5, #6
 8003028:	d107      	bne.n	800303a <_printf_common+0x52>
 800302a:	f104 0a19 	add.w	sl, r4, #25
 800302e:	68e3      	ldr	r3, [r4, #12]
 8003030:	f8d9 2000 	ldr.w	r2, [r9]
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	429d      	cmp	r5, r3
 8003038:	db29      	blt.n	800308e <_printf_common+0xa6>
 800303a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800303e:	6822      	ldr	r2, [r4, #0]
 8003040:	3300      	adds	r3, #0
 8003042:	bf18      	it	ne
 8003044:	2301      	movne	r3, #1
 8003046:	0692      	lsls	r2, r2, #26
 8003048:	d42e      	bmi.n	80030a8 <_printf_common+0xc0>
 800304a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800304e:	4639      	mov	r1, r7
 8003050:	4630      	mov	r0, r6
 8003052:	47c0      	blx	r8
 8003054:	3001      	adds	r0, #1
 8003056:	d021      	beq.n	800309c <_printf_common+0xb4>
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	68e5      	ldr	r5, [r4, #12]
 800305c:	f8d9 2000 	ldr.w	r2, [r9]
 8003060:	f003 0306 	and.w	r3, r3, #6
 8003064:	2b04      	cmp	r3, #4
 8003066:	bf08      	it	eq
 8003068:	1aad      	subeq	r5, r5, r2
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	6922      	ldr	r2, [r4, #16]
 800306e:	bf0c      	ite	eq
 8003070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003074:	2500      	movne	r5, #0
 8003076:	4293      	cmp	r3, r2
 8003078:	bfc4      	itt	gt
 800307a:	1a9b      	subgt	r3, r3, r2
 800307c:	18ed      	addgt	r5, r5, r3
 800307e:	f04f 0900 	mov.w	r9, #0
 8003082:	341a      	adds	r4, #26
 8003084:	454d      	cmp	r5, r9
 8003086:	d11b      	bne.n	80030c0 <_printf_common+0xd8>
 8003088:	2000      	movs	r0, #0
 800308a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800308e:	2301      	movs	r3, #1
 8003090:	4652      	mov	r2, sl
 8003092:	4639      	mov	r1, r7
 8003094:	4630      	mov	r0, r6
 8003096:	47c0      	blx	r8
 8003098:	3001      	adds	r0, #1
 800309a:	d103      	bne.n	80030a4 <_printf_common+0xbc>
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a4:	3501      	adds	r5, #1
 80030a6:	e7c2      	b.n	800302e <_printf_common+0x46>
 80030a8:	18e1      	adds	r1, r4, r3
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	2030      	movs	r0, #48	; 0x30
 80030ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030b2:	4422      	add	r2, r4
 80030b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030bc:	3302      	adds	r3, #2
 80030be:	e7c4      	b.n	800304a <_printf_common+0x62>
 80030c0:	2301      	movs	r3, #1
 80030c2:	4622      	mov	r2, r4
 80030c4:	4639      	mov	r1, r7
 80030c6:	4630      	mov	r0, r6
 80030c8:	47c0      	blx	r8
 80030ca:	3001      	adds	r0, #1
 80030cc:	d0e6      	beq.n	800309c <_printf_common+0xb4>
 80030ce:	f109 0901 	add.w	r9, r9, #1
 80030d2:	e7d7      	b.n	8003084 <_printf_common+0x9c>

080030d4 <_printf_i>:
 80030d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030d8:	4617      	mov	r7, r2
 80030da:	7e0a      	ldrb	r2, [r1, #24]
 80030dc:	b085      	sub	sp, #20
 80030de:	2a6e      	cmp	r2, #110	; 0x6e
 80030e0:	4698      	mov	r8, r3
 80030e2:	4606      	mov	r6, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030e8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80030ec:	f000 80bc 	beq.w	8003268 <_printf_i+0x194>
 80030f0:	d81a      	bhi.n	8003128 <_printf_i+0x54>
 80030f2:	2a63      	cmp	r2, #99	; 0x63
 80030f4:	d02e      	beq.n	8003154 <_printf_i+0x80>
 80030f6:	d80a      	bhi.n	800310e <_printf_i+0x3a>
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	f000 80c8 	beq.w	800328e <_printf_i+0x1ba>
 80030fe:	2a58      	cmp	r2, #88	; 0x58
 8003100:	f000 808a 	beq.w	8003218 <_printf_i+0x144>
 8003104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003108:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800310c:	e02a      	b.n	8003164 <_printf_i+0x90>
 800310e:	2a64      	cmp	r2, #100	; 0x64
 8003110:	d001      	beq.n	8003116 <_printf_i+0x42>
 8003112:	2a69      	cmp	r2, #105	; 0x69
 8003114:	d1f6      	bne.n	8003104 <_printf_i+0x30>
 8003116:	6821      	ldr	r1, [r4, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800311e:	d023      	beq.n	8003168 <_printf_i+0x94>
 8003120:	1d11      	adds	r1, r2, #4
 8003122:	6019      	str	r1, [r3, #0]
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	e027      	b.n	8003178 <_printf_i+0xa4>
 8003128:	2a73      	cmp	r2, #115	; 0x73
 800312a:	f000 80b4 	beq.w	8003296 <_printf_i+0x1c2>
 800312e:	d808      	bhi.n	8003142 <_printf_i+0x6e>
 8003130:	2a6f      	cmp	r2, #111	; 0x6f
 8003132:	d02a      	beq.n	800318a <_printf_i+0xb6>
 8003134:	2a70      	cmp	r2, #112	; 0x70
 8003136:	d1e5      	bne.n	8003104 <_printf_i+0x30>
 8003138:	680a      	ldr	r2, [r1, #0]
 800313a:	f042 0220 	orr.w	r2, r2, #32
 800313e:	600a      	str	r2, [r1, #0]
 8003140:	e003      	b.n	800314a <_printf_i+0x76>
 8003142:	2a75      	cmp	r2, #117	; 0x75
 8003144:	d021      	beq.n	800318a <_printf_i+0xb6>
 8003146:	2a78      	cmp	r2, #120	; 0x78
 8003148:	d1dc      	bne.n	8003104 <_printf_i+0x30>
 800314a:	2278      	movs	r2, #120	; 0x78
 800314c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003150:	496e      	ldr	r1, [pc, #440]	; (800330c <_printf_i+0x238>)
 8003152:	e064      	b.n	800321e <_printf_i+0x14a>
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800315a:	1d11      	adds	r1, r2, #4
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003164:	2301      	movs	r3, #1
 8003166:	e0a3      	b.n	80032b0 <_printf_i+0x1dc>
 8003168:	f011 0f40 	tst.w	r1, #64	; 0x40
 800316c:	f102 0104 	add.w	r1, r2, #4
 8003170:	6019      	str	r1, [r3, #0]
 8003172:	d0d7      	beq.n	8003124 <_printf_i+0x50>
 8003174:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da03      	bge.n	8003184 <_printf_i+0xb0>
 800317c:	222d      	movs	r2, #45	; 0x2d
 800317e:	425b      	negs	r3, r3
 8003180:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003184:	4962      	ldr	r1, [pc, #392]	; (8003310 <_printf_i+0x23c>)
 8003186:	220a      	movs	r2, #10
 8003188:	e017      	b.n	80031ba <_printf_i+0xe6>
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003192:	d003      	beq.n	800319c <_printf_i+0xc8>
 8003194:	1d08      	adds	r0, r1, #4
 8003196:	6018      	str	r0, [r3, #0]
 8003198:	680b      	ldr	r3, [r1, #0]
 800319a:	e006      	b.n	80031aa <_printf_i+0xd6>
 800319c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031a0:	f101 0004 	add.w	r0, r1, #4
 80031a4:	6018      	str	r0, [r3, #0]
 80031a6:	d0f7      	beq.n	8003198 <_printf_i+0xc4>
 80031a8:	880b      	ldrh	r3, [r1, #0]
 80031aa:	4959      	ldr	r1, [pc, #356]	; (8003310 <_printf_i+0x23c>)
 80031ac:	2a6f      	cmp	r2, #111	; 0x6f
 80031ae:	bf14      	ite	ne
 80031b0:	220a      	movne	r2, #10
 80031b2:	2208      	moveq	r2, #8
 80031b4:	2000      	movs	r0, #0
 80031b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80031ba:	6865      	ldr	r5, [r4, #4]
 80031bc:	60a5      	str	r5, [r4, #8]
 80031be:	2d00      	cmp	r5, #0
 80031c0:	f2c0 809c 	blt.w	80032fc <_printf_i+0x228>
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	f020 0004 	bic.w	r0, r0, #4
 80031ca:	6020      	str	r0, [r4, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13f      	bne.n	8003250 <_printf_i+0x17c>
 80031d0:	2d00      	cmp	r5, #0
 80031d2:	f040 8095 	bne.w	8003300 <_printf_i+0x22c>
 80031d6:	4675      	mov	r5, lr
 80031d8:	2a08      	cmp	r2, #8
 80031da:	d10b      	bne.n	80031f4 <_printf_i+0x120>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	07da      	lsls	r2, r3, #31
 80031e0:	d508      	bpl.n	80031f4 <_printf_i+0x120>
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	6862      	ldr	r2, [r4, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	bfde      	ittt	le
 80031ea:	2330      	movle	r3, #48	; 0x30
 80031ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031f4:	ebae 0305 	sub.w	r3, lr, r5
 80031f8:	6123      	str	r3, [r4, #16]
 80031fa:	f8cd 8000 	str.w	r8, [sp]
 80031fe:	463b      	mov	r3, r7
 8003200:	aa03      	add	r2, sp, #12
 8003202:	4621      	mov	r1, r4
 8003204:	4630      	mov	r0, r6
 8003206:	f7ff feef 	bl	8002fe8 <_printf_common>
 800320a:	3001      	adds	r0, #1
 800320c:	d155      	bne.n	80032ba <_printf_i+0x1e6>
 800320e:	f04f 30ff 	mov.w	r0, #4294967295
 8003212:	b005      	add	sp, #20
 8003214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003218:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800321c:	493c      	ldr	r1, [pc, #240]	; (8003310 <_printf_i+0x23c>)
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003226:	f100 0504 	add.w	r5, r0, #4
 800322a:	601d      	str	r5, [r3, #0]
 800322c:	d001      	beq.n	8003232 <_printf_i+0x15e>
 800322e:	6803      	ldr	r3, [r0, #0]
 8003230:	e002      	b.n	8003238 <_printf_i+0x164>
 8003232:	0655      	lsls	r5, r2, #25
 8003234:	d5fb      	bpl.n	800322e <_printf_i+0x15a>
 8003236:	8803      	ldrh	r3, [r0, #0]
 8003238:	07d0      	lsls	r0, r2, #31
 800323a:	bf44      	itt	mi
 800323c:	f042 0220 	orrmi.w	r2, r2, #32
 8003240:	6022      	strmi	r2, [r4, #0]
 8003242:	b91b      	cbnz	r3, 800324c <_printf_i+0x178>
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	f022 0220 	bic.w	r2, r2, #32
 800324a:	6022      	str	r2, [r4, #0]
 800324c:	2210      	movs	r2, #16
 800324e:	e7b1      	b.n	80031b4 <_printf_i+0xe0>
 8003250:	4675      	mov	r5, lr
 8003252:	fbb3 f0f2 	udiv	r0, r3, r2
 8003256:	fb02 3310 	mls	r3, r2, r0, r3
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003260:	4603      	mov	r3, r0
 8003262:	2800      	cmp	r0, #0
 8003264:	d1f5      	bne.n	8003252 <_printf_i+0x17e>
 8003266:	e7b7      	b.n	80031d8 <_printf_i+0x104>
 8003268:	6808      	ldr	r0, [r1, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	6949      	ldr	r1, [r1, #20]
 800326e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003272:	d004      	beq.n	800327e <_printf_i+0x1aa>
 8003274:	1d10      	adds	r0, r2, #4
 8003276:	6018      	str	r0, [r3, #0]
 8003278:	6813      	ldr	r3, [r2, #0]
 800327a:	6019      	str	r1, [r3, #0]
 800327c:	e007      	b.n	800328e <_printf_i+0x1ba>
 800327e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003282:	f102 0004 	add.w	r0, r2, #4
 8003286:	6018      	str	r0, [r3, #0]
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	d0f6      	beq.n	800327a <_printf_i+0x1a6>
 800328c:	8019      	strh	r1, [r3, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	6123      	str	r3, [r4, #16]
 8003292:	4675      	mov	r5, lr
 8003294:	e7b1      	b.n	80031fa <_printf_i+0x126>
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	1d11      	adds	r1, r2, #4
 800329a:	6019      	str	r1, [r3, #0]
 800329c:	6815      	ldr	r5, [r2, #0]
 800329e:	6862      	ldr	r2, [r4, #4]
 80032a0:	2100      	movs	r1, #0
 80032a2:	4628      	mov	r0, r5
 80032a4:	f7fc ffac 	bl	8000200 <memchr>
 80032a8:	b108      	cbz	r0, 80032ae <_printf_i+0x1da>
 80032aa:	1b40      	subs	r0, r0, r5
 80032ac:	6060      	str	r0, [r4, #4]
 80032ae:	6863      	ldr	r3, [r4, #4]
 80032b0:	6123      	str	r3, [r4, #16]
 80032b2:	2300      	movs	r3, #0
 80032b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b8:	e79f      	b.n	80031fa <_printf_i+0x126>
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	462a      	mov	r2, r5
 80032be:	4639      	mov	r1, r7
 80032c0:	4630      	mov	r0, r6
 80032c2:	47c0      	blx	r8
 80032c4:	3001      	adds	r0, #1
 80032c6:	d0a2      	beq.n	800320e <_printf_i+0x13a>
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	079b      	lsls	r3, r3, #30
 80032cc:	d507      	bpl.n	80032de <_printf_i+0x20a>
 80032ce:	2500      	movs	r5, #0
 80032d0:	f104 0919 	add.w	r9, r4, #25
 80032d4:	68e3      	ldr	r3, [r4, #12]
 80032d6:	9a03      	ldr	r2, [sp, #12]
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	429d      	cmp	r5, r3
 80032dc:	db05      	blt.n	80032ea <_printf_i+0x216>
 80032de:	68e0      	ldr	r0, [r4, #12]
 80032e0:	9b03      	ldr	r3, [sp, #12]
 80032e2:	4298      	cmp	r0, r3
 80032e4:	bfb8      	it	lt
 80032e6:	4618      	movlt	r0, r3
 80032e8:	e793      	b.n	8003212 <_printf_i+0x13e>
 80032ea:	2301      	movs	r3, #1
 80032ec:	464a      	mov	r2, r9
 80032ee:	4639      	mov	r1, r7
 80032f0:	4630      	mov	r0, r6
 80032f2:	47c0      	blx	r8
 80032f4:	3001      	adds	r0, #1
 80032f6:	d08a      	beq.n	800320e <_printf_i+0x13a>
 80032f8:	3501      	adds	r5, #1
 80032fa:	e7eb      	b.n	80032d4 <_printf_i+0x200>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1a7      	bne.n	8003250 <_printf_i+0x17c>
 8003300:	780b      	ldrb	r3, [r1, #0]
 8003302:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003306:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800330a:	e765      	b.n	80031d8 <_printf_i+0x104>
 800330c:	08003611 	.word	0x08003611
 8003310:	08003600 	.word	0x08003600

08003314 <memcpy>:
 8003314:	b510      	push	{r4, lr}
 8003316:	1e43      	subs	r3, r0, #1
 8003318:	440a      	add	r2, r1
 800331a:	4291      	cmp	r1, r2
 800331c:	d100      	bne.n	8003320 <memcpy+0xc>
 800331e:	bd10      	pop	{r4, pc}
 8003320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003328:	e7f7      	b.n	800331a <memcpy+0x6>

0800332a <memmove>:
 800332a:	4288      	cmp	r0, r1
 800332c:	b510      	push	{r4, lr}
 800332e:	eb01 0302 	add.w	r3, r1, r2
 8003332:	d803      	bhi.n	800333c <memmove+0x12>
 8003334:	1e42      	subs	r2, r0, #1
 8003336:	4299      	cmp	r1, r3
 8003338:	d10c      	bne.n	8003354 <memmove+0x2a>
 800333a:	bd10      	pop	{r4, pc}
 800333c:	4298      	cmp	r0, r3
 800333e:	d2f9      	bcs.n	8003334 <memmove+0xa>
 8003340:	1881      	adds	r1, r0, r2
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	42d3      	cmn	r3, r2
 8003346:	d100      	bne.n	800334a <memmove+0x20>
 8003348:	bd10      	pop	{r4, pc}
 800334a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800334e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003352:	e7f7      	b.n	8003344 <memmove+0x1a>
 8003354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003358:	f802 4f01 	strb.w	r4, [r2, #1]!
 800335c:	e7eb      	b.n	8003336 <memmove+0xc>
	...

08003360 <_free_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4605      	mov	r5, r0
 8003364:	2900      	cmp	r1, #0
 8003366:	d045      	beq.n	80033f4 <_free_r+0x94>
 8003368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336c:	1f0c      	subs	r4, r1, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfb8      	it	lt
 8003372:	18e4      	addlt	r4, r4, r3
 8003374:	f000 f8d6 	bl	8003524 <__malloc_lock>
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <_free_r+0x98>)
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	4610      	mov	r0, r2
 800337e:	b933      	cbnz	r3, 800338e <_free_r+0x2e>
 8003380:	6063      	str	r3, [r4, #4]
 8003382:	6014      	str	r4, [r2, #0]
 8003384:	4628      	mov	r0, r5
 8003386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800338a:	f000 b8cc 	b.w	8003526 <__malloc_unlock>
 800338e:	42a3      	cmp	r3, r4
 8003390:	d90c      	bls.n	80033ac <_free_r+0x4c>
 8003392:	6821      	ldr	r1, [r4, #0]
 8003394:	1862      	adds	r2, r4, r1
 8003396:	4293      	cmp	r3, r2
 8003398:	bf04      	itt	eq
 800339a:	681a      	ldreq	r2, [r3, #0]
 800339c:	685b      	ldreq	r3, [r3, #4]
 800339e:	6063      	str	r3, [r4, #4]
 80033a0:	bf04      	itt	eq
 80033a2:	1852      	addeq	r2, r2, r1
 80033a4:	6022      	streq	r2, [r4, #0]
 80033a6:	6004      	str	r4, [r0, #0]
 80033a8:	e7ec      	b.n	8003384 <_free_r+0x24>
 80033aa:	4613      	mov	r3, r2
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	b10a      	cbz	r2, 80033b4 <_free_r+0x54>
 80033b0:	42a2      	cmp	r2, r4
 80033b2:	d9fa      	bls.n	80033aa <_free_r+0x4a>
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	1858      	adds	r0, r3, r1
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d10b      	bne.n	80033d4 <_free_r+0x74>
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	4401      	add	r1, r0
 80033c0:	1858      	adds	r0, r3, r1
 80033c2:	4282      	cmp	r2, r0
 80033c4:	6019      	str	r1, [r3, #0]
 80033c6:	d1dd      	bne.n	8003384 <_free_r+0x24>
 80033c8:	6810      	ldr	r0, [r2, #0]
 80033ca:	6852      	ldr	r2, [r2, #4]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	4401      	add	r1, r0
 80033d0:	6019      	str	r1, [r3, #0]
 80033d2:	e7d7      	b.n	8003384 <_free_r+0x24>
 80033d4:	d902      	bls.n	80033dc <_free_r+0x7c>
 80033d6:	230c      	movs	r3, #12
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	e7d3      	b.n	8003384 <_free_r+0x24>
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	1821      	adds	r1, r4, r0
 80033e0:	428a      	cmp	r2, r1
 80033e2:	bf04      	itt	eq
 80033e4:	6811      	ldreq	r1, [r2, #0]
 80033e6:	6852      	ldreq	r2, [r2, #4]
 80033e8:	6062      	str	r2, [r4, #4]
 80033ea:	bf04      	itt	eq
 80033ec:	1809      	addeq	r1, r1, r0
 80033ee:	6021      	streq	r1, [r4, #0]
 80033f0:	605c      	str	r4, [r3, #4]
 80033f2:	e7c7      	b.n	8003384 <_free_r+0x24>
 80033f4:	bd38      	pop	{r3, r4, r5, pc}
 80033f6:	bf00      	nop
 80033f8:	200000c0 	.word	0x200000c0

080033fc <_malloc_r>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	1ccd      	adds	r5, r1, #3
 8003400:	f025 0503 	bic.w	r5, r5, #3
 8003404:	3508      	adds	r5, #8
 8003406:	2d0c      	cmp	r5, #12
 8003408:	bf38      	it	cc
 800340a:	250c      	movcc	r5, #12
 800340c:	2d00      	cmp	r5, #0
 800340e:	4606      	mov	r6, r0
 8003410:	db01      	blt.n	8003416 <_malloc_r+0x1a>
 8003412:	42a9      	cmp	r1, r5
 8003414:	d903      	bls.n	800341e <_malloc_r+0x22>
 8003416:	230c      	movs	r3, #12
 8003418:	6033      	str	r3, [r6, #0]
 800341a:	2000      	movs	r0, #0
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	f000 f881 	bl	8003524 <__malloc_lock>
 8003422:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <_malloc_r+0xb4>)
 8003424:	6814      	ldr	r4, [r2, #0]
 8003426:	4621      	mov	r1, r4
 8003428:	b991      	cbnz	r1, 8003450 <_malloc_r+0x54>
 800342a:	4c22      	ldr	r4, [pc, #136]	; (80034b4 <_malloc_r+0xb8>)
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	b91b      	cbnz	r3, 8003438 <_malloc_r+0x3c>
 8003430:	4630      	mov	r0, r6
 8003432:	f000 f867 	bl	8003504 <_sbrk_r>
 8003436:	6020      	str	r0, [r4, #0]
 8003438:	4629      	mov	r1, r5
 800343a:	4630      	mov	r0, r6
 800343c:	f000 f862 	bl	8003504 <_sbrk_r>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d126      	bne.n	8003492 <_malloc_r+0x96>
 8003444:	230c      	movs	r3, #12
 8003446:	6033      	str	r3, [r6, #0]
 8003448:	4630      	mov	r0, r6
 800344a:	f000 f86c 	bl	8003526 <__malloc_unlock>
 800344e:	e7e4      	b.n	800341a <_malloc_r+0x1e>
 8003450:	680b      	ldr	r3, [r1, #0]
 8003452:	1b5b      	subs	r3, r3, r5
 8003454:	d41a      	bmi.n	800348c <_malloc_r+0x90>
 8003456:	2b0b      	cmp	r3, #11
 8003458:	d90f      	bls.n	800347a <_malloc_r+0x7e>
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	50cd      	str	r5, [r1, r3]
 800345e:	18cc      	adds	r4, r1, r3
 8003460:	4630      	mov	r0, r6
 8003462:	f000 f860 	bl	8003526 <__malloc_unlock>
 8003466:	f104 000b 	add.w	r0, r4, #11
 800346a:	1d23      	adds	r3, r4, #4
 800346c:	f020 0007 	bic.w	r0, r0, #7
 8003470:	1ac3      	subs	r3, r0, r3
 8003472:	d01b      	beq.n	80034ac <_malloc_r+0xb0>
 8003474:	425a      	negs	r2, r3
 8003476:	50e2      	str	r2, [r4, r3]
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	428c      	cmp	r4, r1
 800347c:	bf0d      	iteet	eq
 800347e:	6863      	ldreq	r3, [r4, #4]
 8003480:	684b      	ldrne	r3, [r1, #4]
 8003482:	6063      	strne	r3, [r4, #4]
 8003484:	6013      	streq	r3, [r2, #0]
 8003486:	bf18      	it	ne
 8003488:	460c      	movne	r4, r1
 800348a:	e7e9      	b.n	8003460 <_malloc_r+0x64>
 800348c:	460c      	mov	r4, r1
 800348e:	6849      	ldr	r1, [r1, #4]
 8003490:	e7ca      	b.n	8003428 <_malloc_r+0x2c>
 8003492:	1cc4      	adds	r4, r0, #3
 8003494:	f024 0403 	bic.w	r4, r4, #3
 8003498:	42a0      	cmp	r0, r4
 800349a:	d005      	beq.n	80034a8 <_malloc_r+0xac>
 800349c:	1a21      	subs	r1, r4, r0
 800349e:	4630      	mov	r0, r6
 80034a0:	f000 f830 	bl	8003504 <_sbrk_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d0cd      	beq.n	8003444 <_malloc_r+0x48>
 80034a8:	6025      	str	r5, [r4, #0]
 80034aa:	e7d9      	b.n	8003460 <_malloc_r+0x64>
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	bf00      	nop
 80034b0:	200000c0 	.word	0x200000c0
 80034b4:	200000c4 	.word	0x200000c4

080034b8 <_realloc_r>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	4607      	mov	r7, r0
 80034bc:	4614      	mov	r4, r2
 80034be:	460e      	mov	r6, r1
 80034c0:	b921      	cbnz	r1, 80034cc <_realloc_r+0x14>
 80034c2:	4611      	mov	r1, r2
 80034c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034c8:	f7ff bf98 	b.w	80033fc <_malloc_r>
 80034cc:	b922      	cbnz	r2, 80034d8 <_realloc_r+0x20>
 80034ce:	f7ff ff47 	bl	8003360 <_free_r>
 80034d2:	4625      	mov	r5, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d8:	f000 f826 	bl	8003528 <_malloc_usable_size_r>
 80034dc:	4284      	cmp	r4, r0
 80034de:	d90f      	bls.n	8003500 <_realloc_r+0x48>
 80034e0:	4621      	mov	r1, r4
 80034e2:	4638      	mov	r0, r7
 80034e4:	f7ff ff8a 	bl	80033fc <_malloc_r>
 80034e8:	4605      	mov	r5, r0
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d0f2      	beq.n	80034d4 <_realloc_r+0x1c>
 80034ee:	4631      	mov	r1, r6
 80034f0:	4622      	mov	r2, r4
 80034f2:	f7ff ff0f 	bl	8003314 <memcpy>
 80034f6:	4631      	mov	r1, r6
 80034f8:	4638      	mov	r0, r7
 80034fa:	f7ff ff31 	bl	8003360 <_free_r>
 80034fe:	e7e9      	b.n	80034d4 <_realloc_r+0x1c>
 8003500:	4635      	mov	r5, r6
 8003502:	e7e7      	b.n	80034d4 <_realloc_r+0x1c>

08003504 <_sbrk_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4c06      	ldr	r4, [pc, #24]	; (8003520 <_sbrk_r+0x1c>)
 8003508:	2300      	movs	r3, #0
 800350a:	4605      	mov	r5, r0
 800350c:	4608      	mov	r0, r1
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	f000 f814 	bl	800353c <_sbrk>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d102      	bne.n	800351e <_sbrk_r+0x1a>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	b103      	cbz	r3, 800351e <_sbrk_r+0x1a>
 800351c:	602b      	str	r3, [r5, #0]
 800351e:	bd38      	pop	{r3, r4, r5, pc}
 8003520:	200001d0 	.word	0x200001d0

08003524 <__malloc_lock>:
 8003524:	4770      	bx	lr

08003526 <__malloc_unlock>:
 8003526:	4770      	bx	lr

08003528 <_malloc_usable_size_r>:
 8003528:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800352c:	2800      	cmp	r0, #0
 800352e:	f1a0 0004 	sub.w	r0, r0, #4
 8003532:	bfbc      	itt	lt
 8003534:	580b      	ldrlt	r3, [r1, r0]
 8003536:	18c0      	addlt	r0, r0, r3
 8003538:	4770      	bx	lr
	...

0800353c <_sbrk>:
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <_sbrk+0x14>)
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	4602      	mov	r2, r0
 8003542:	b909      	cbnz	r1, 8003548 <_sbrk+0xc>
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <_sbrk+0x18>)
 8003546:	6019      	str	r1, [r3, #0]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	4402      	add	r2, r0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	4770      	bx	lr
 8003550:	200000c8 	.word	0x200000c8
 8003554:	200001d4 	.word	0x200001d4

08003558 <_init>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr

08003564 <_fini>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr
